diff --git a/src/backend/nodes/list.c b/src/backend/nodes/list.c
index e94b357..51ce5d9 100644
--- a/src/backend/nodes/list.c
+++ b/src/backend/nodes/list.c
@@ -25,38 +25,6 @@
 #include "postgres.h"
 #include "nodes/parsenodes.h"
 
-/*
- *	makeList
- *
- *	Take varargs, terminated by -1, and make a List
- */
-List *
-makeList(void *elem,...)
-{
-	va_list		args;
-	List	   *retval = NIL;
-	List	   *temp = NIL;
-	List	   *tempcons = NIL;
-
-	va_start(args, elem);
-
-	temp = elem;
-	while (temp != (void *) -1)
-	{
-		temp = lcons(temp, NIL);
-		if (tempcons == NIL)
-			retval = temp;
-		else
-			lnext(tempcons) = temp;
-		tempcons = temp;
-
-		temp = va_arg(args, void *);
-	}
-
-	va_end(args);
-
-	return retval;
-}
 
 /*
  *	makeInteger
diff --git a/src/backend/parser/analyze.c b/src/backend/parser/analyze.c
index 888f8f8..f5ad7f2 100644
--- a/src/backend/parser/analyze.c
+++ b/src/backend/parser/analyze.c
@@ -2083,7 +2083,7 @@ A_Expr_to_Expr(Node *ptr, bool *intersect_present)
 
 							expr->typeOid = BOOLOID;
 							expr->opType = OR_EXPR;
-							expr->args = makeList(lexpr, rexpr, -1);
+							expr->args = makeList2(lexpr, rexpr);
 							result = (Node *) expr;
 							break;
 						}
@@ -2095,7 +2095,7 @@ A_Expr_to_Expr(Node *ptr, bool *intersect_present)
 
 							expr->typeOid = BOOLOID;
 							expr->opType = AND_EXPR;
-							expr->args = makeList(lexpr, rexpr, -1);
+							expr->args = makeList2(lexpr, rexpr);
 							result = (Node *) expr;
 							break;
 						}
@@ -2106,7 +2106,7 @@ A_Expr_to_Expr(Node *ptr, bool *intersect_present)
 
 							expr->typeOid = BOOLOID;
 							expr->opType = NOT_EXPR;
-							expr->args = makeList(rexpr, -1);
+							expr->args = makeList1(rexpr);
 							result = (Node *) expr;
 							break;
 						}
diff --git a/src/backend/parser/gram.y b/src/backend/parser/gram.y
index 93aa912..2425696 100644
--- a/src/backend/parser/gram.y
+++ b/src/backend/parser/gram.y
@@ -2631,11 +2631,11 @@ oper_argtypes:	name
 				   elog(ERROR,"parser: argument type missing (use NONE for unary operators)");
 				}
 		| name ',' name
-				{ $$ = makeList(makeString($1), makeString($3), -1); }
+				{ $$ = makeList2(makeString($1), makeString($3)); }
 		| NONE ',' name			/* left unary */
-				{ $$ = makeList(NULL, makeString($3), -1); }
+				{ $$ = makeList2(NULL, makeString($3)); }
 		| name ',' NONE			/* right unary */
-				{ $$ = makeList(makeString($1), NULL, -1); }
+				{ $$ = makeList2(makeString($1), NULL); }
 		;
 
 
@@ -4524,7 +4524,7 @@ a_expr:  c_expr
 				{
 					FuncCall *n = makeNode(FuncCall);
 					n->funcname = "like_escape";
-					n->args = makeList($3, $5, -1);
+					n->args = makeList2($3, $5);
 					n->agg_star = FALSE;
 					n->agg_distinct = FALSE;
 					$$ = makeA_Expr(OP, "~~", $1, (Node *) n);
@@ -4535,7 +4535,7 @@ a_expr:  c_expr
 				{
 					FuncCall *n = makeNode(FuncCall);
 					n->funcname = "like_escape";
-					n->args = makeList($4, $6, -1);
+					n->args = makeList2($4, $6);
 					n->agg_star = FALSE;
 					n->agg_distinct = FALSE;
 					$$ = makeA_Expr(OP, "!~~", $1, (Node *) n);
@@ -4546,7 +4546,7 @@ a_expr:  c_expr
 				{
 					FuncCall *n = makeNode(FuncCall);
 					n->funcname = "like_escape";
-					n->args = makeList($3, $5, -1);
+					n->args = makeList2($3, $5);
 					n->agg_star = FALSE;
 					n->agg_distinct = FALSE;
 					$$ = makeA_Expr(OP, "~~*", $1, (Node *) n);
@@ -4557,7 +4557,7 @@ a_expr:  c_expr
 				{
 					FuncCall *n = makeNode(FuncCall);
 					n->funcname = "like_escape";
-					n->args = makeList($4, $6, -1);
+					n->args = makeList2($4, $6);
 					n->agg_star = FALSE;
 					n->agg_distinct = FALSE;
 					$$ = makeA_Expr(OP, "!~~*", $1, (Node *) n);
@@ -5135,7 +5135,7 @@ extract_list:  extract_arg FROM a_expr
 					A_Const *n = makeNode(A_Const);
 					n->val.type = T_String;
 					n->val.val.str = $1;
-					$$ = makeList((Node *)n, $3, -1);
+					$$ = makeList2((Node *)n, $3);
 				}
 		| /*EMPTY*/
 				{	$$ = NIL; }
@@ -5149,7 +5149,7 @@ extract_arg:  datetime						{ $$ = $1; }
 /* position_list uses b_expr not a_expr to avoid conflict with general IN */
 
 position_list:  b_expr IN b_expr
-				{	$$ = makeList($3, $1, -1); }
+				{	$$ = makeList2($3, $1); }
 		| /*EMPTY*/
 				{	$$ = NIL; }
 		;
diff --git a/src/backend/parser/parse_expr.c b/src/backend/parser/parse_expr.c
index a033ff4..103a0fd 100644
--- a/src/backend/parser/parse_expr.c
+++ b/src/backend/parser/parse_expr.c
@@ -213,7 +213,7 @@ transformExpr(ParseState *pstate, Node *expr, int precedence)
 
 							expr->typeOid = BOOLOID;
 							expr->opType = AND_EXPR;
-							expr->args = makeList(lexpr, rexpr, -1);
+							expr->args = makeList2(lexpr, rexpr);
 							result = (Node *) expr;
 						}
 						break;
@@ -235,7 +235,7 @@ transformExpr(ParseState *pstate, Node *expr, int precedence)
 									 typeidTypeName(exprType(rexpr)), typeidTypeName(BOOLOID));
 							expr->typeOid = BOOLOID;
 							expr->opType = OR_EXPR;
-							expr->args = makeList(lexpr, rexpr, -1);
+							expr->args = makeList2(lexpr, rexpr);
 							result = (Node *) expr;
 						}
 						break;
@@ -251,7 +251,7 @@ transformExpr(ParseState *pstate, Node *expr, int precedence)
 									 typeidTypeName(exprType(rexpr)), typeidTypeName(BOOLOID));
 							expr->typeOid = BOOLOID;
 							expr->opType = NOT_EXPR;
-							expr->args = makeList(rexpr, -1);
+							expr->args = makeList1(rexpr);
 							result = (Node *) expr;
 						}
 						break;
diff --git a/src/backend/rewrite/rewriteManip.c b/src/backend/rewrite/rewriteManip.c
index e83ac05..5e1cd7d 100644
--- a/src/backend/rewrite/rewriteManip.c
+++ b/src/backend/rewrite/rewriteManip.c
@@ -486,7 +486,7 @@ AddQual(Query *parsetree, Node *qual)
 	if (old == NULL)
 		parsetree->qual = copy;
 	else
-		parsetree->qual = (Node *) make_andclause(makeList(old, copy, -1));
+		parsetree->qual = (Node *) make_andclause(makeList2(old, copy));
 
 	/*
 	 * Make sure query is marked correctly if added qual has sublinks or
@@ -517,7 +517,7 @@ AddHavingQual(Query *parsetree, Node *havingQual)
 	if (old == NULL)
 		parsetree->havingQual = copy;
 	else
-		parsetree->havingQual = (Node *) make_andclause(makeList(old, copy, -1));
+		parsetree->havingQual = (Node *) make_andclause(makeList2(old, copy));
 
 	/*
 	 * Make sure query is marked correctly if added qual has sublinks or
diff --git a/src/include/nodes/pg_list.h b/src/include/nodes/pg_list.h
index 4e0bcfc..bf7277b 100644
--- a/src/include/nodes/pg_list.h
+++ b/src/include/nodes/pg_list.h
@@ -92,6 +92,18 @@ typedef struct List
 #define foreach(_elt_,_list_)	\
 	for(_elt_=(_list_); _elt_!=NIL; _elt_=lnext(_elt_))
 
+/*
+ * Convenience macros for building fixed-length lists
+ */
+#define makeList1(x1)				lcons(x1, NIL)
+#define makeList2(x1,x2)			lcons(x1, makeList1(x2))
+#define makeList3(x1,x2,x3)			lcons(x1, makeList2(x2,x3))
+#define makeList4(x1,x2,x3,x4)		lcons(x1, makeList3(x2,x3,x4))
+
+#define makeListi1(x1)				lconsi(x1, NIL)
+#define makeListi2(x1,x2)			lconsi(x1, makeListi1(x2))
+#define makeListi3(x1,x2,x3)		lconsi(x1, makeListi2(x2,x3))
+#define makeListi4(x1,x2,x3,x4)		lconsi(x1, makeListi3(x2,x3,x4))
 
 /*
  * function prototypes in nodes/list.c
@@ -106,7 +118,6 @@ extern bool intMember(int datum, List *list);
 extern Value *makeInteger(long i);
 extern Value *makeFloat(char *numericStr);
 extern Value *makeString(char *str);
-extern List *makeList(void *elem,...);
 extern List *lappend(List *list, void *datum);
 extern List *lappendi(List *list, int datum);
 extern List *lremove(void *elem, List *list);
