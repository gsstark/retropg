diff --git a/src/backend/access/hash/hashfunc.c b/src/backend/access/hash/hashfunc.c
index b9f36b0..e34330d 100644
--- a/src/backend/access/hash/hashfunc.c
+++ b/src/backend/access/hash/hashfunc.c
@@ -21,15 +21,15 @@
 #include "access/hash.h"
 
 uint32
-hashint2(int16 key)
+hashint2(Datum key)
 {
-	return (uint32) ~key;
+	return (uint32) ~((int16)key);
 }
 
 uint32
-hashint4(uint32 key)
+hashint4(Datum key)
 {
-	return ~key;
+	return ~((uint32)key);
 }
 
 uint32
@@ -155,7 +155,7 @@ hashoid8(Oid *key)
 #define PRIME2			1048583
 
 uint32
-hashchar(char key)
+hashchar(Datum key)
 {
 	int			len;
 	uint32		h;
@@ -163,7 +163,7 @@ hashchar(char key)
 	h = 0;
 	len = sizeof(char);
 	/* Convert char to integer */
-	h = h * PRIME1 ^ (key - ' ');
+	h = h * PRIME1 ^ ((char)key - ' ');
 	h %= PRIME2;
 
 	return h;
diff --git a/src/backend/access/nbtree/nbtcompare.c b/src/backend/access/nbtree/nbtcompare.c
index cc199b1..14891ea 100644
--- a/src/backend/access/nbtree/nbtcompare.c
+++ b/src/backend/access/nbtree/nbtcompare.c
@@ -26,15 +26,15 @@
 #include "utils/builtins.h"
 
 int32
-btint2cmp(int16 a, int16 b)
+btint2cmp(Datum a, Datum b)
 {
-	return (int32) (a - b);
+	return (int32) ((int16)a - (int16)b);
 }
 
 int32
-btint4cmp(int32 a, int32 b)
+btint4cmp(Datum a, Datum b)
 {
-	return a - b;
+	return (int32)a - (int32)b;
 }
 
 int32
@@ -49,15 +49,15 @@ btint8cmp(int64 *a, int64 *b)
 }
 
 int32
-btint24cmp(int16 a, int32 b)
+btint24cmp(Datum a, Datum b)
 {
-	return ((int32) a) - b;
+	return ((int16) a) - (int32)b;
 }
 
 int32
-btint42cmp(int32 a, int16 b)
+btint42cmp(Datum a, Datum b)
 {
-	return a - ((int32) b);
+	return (int32)a - ((int16) b);
 }
 
 int32
@@ -112,8 +112,9 @@ btoid8cmp(Oid *a, Oid *b)
 
 
 int32
-btabstimecmp(AbsoluteTime a, AbsoluteTime b)
+btabstimecmp(Datum da, Datum db)
 {
+	AbsoluteTime a = da,  b = db;
 	if (AbsoluteTimeIsBefore(a, b))
 		return -1;
 	else if (AbsoluteTimeIsBefore(b, a))
@@ -123,7 +124,7 @@ btabstimecmp(AbsoluteTime a, AbsoluteTime b)
 }
 
 int32
-btcharcmp(char a, char b)
+btcharcmp(Datum a, Datum b)
 {
 	return (int32) ((uint8) a - (uint8) b);
 }
diff --git a/src/backend/bootstrap/Makefile b/src/backend/bootstrap/Makefile
index ccf8f46..e5bd3b0 100644
--- a/src/backend/bootstrap/Makefile
+++ b/src/backend/bootstrap/Makefile
@@ -49,9 +49,9 @@ bootstrap.o: bootstrap_tokens.h
 bootstrap_tokens.h bootparse.c: bootparse.y
 	$(YACC) $(YFLAGS) $<
 	grep -v "^#" boot.sed > sedfile
-	sed -f sedfile < y.tab.c > bootparse.c
-	mv y.tab.h bootstrap_tokens.h
-	rm -f y.tab.c sedfile
+	sed -f sedfile < bootparse.tab.c > bootparse.c
+	mv bootparse.tab.h bootstrap_tokens.h
+	rm -f bootparse.tab.c sedfile
 
 bootscanner.c: bootscanner.l
 	$(LEX) $<
diff --git a/src/backend/catalog/genbki.sh.in b/src/backend/catalog/genbki.sh.in
index d7b925f..4dc43ea 100644
--- a/src/backend/catalog/genbki.sh.in
+++ b/src/backend/catalog/genbki.sh.in
@@ -76,7 +76,7 @@ sed -e "s/;[ 	]*$//g" \
     -e "s/[ 	]Oid/\ oid/g" \
     -e "s/[ 	]NameData/\ name/g" \
     -e "s/^Oid/oid/g" \
-    -e "s/^NameData/\name/g" \
+    -e "s/^NameData/name/g" \
     -e "s/(NameData/(name/g" \
     -e "s/(Oid/(oid/g" \
     -e "s/NAMEDATALEN/$NAMEDATALEN/g" \
diff --git a/src/backend/nodes/list.c b/src/backend/nodes/list.c
index 48c15f1..f8e54a2 100644
--- a/src/backend/nodes/list.c
+++ b/src/backend/nodes/list.c
@@ -30,39 +30,6 @@
 #include "utils/palloc.h"
 
 /*
- *	makeList
- *
- *	Take varargs, terminated by -1, and make a List
- */
-List *
-makeList(void *elem,...)
-{
-	va_list		args;
-	List	   *retval = NIL;
-	List	   *temp = NIL;
-	List	   *tempcons = NIL;
-
-	va_start(args, elem);
-
-	temp = elem;
-	while (temp != (void *) -1)
-	{
-		temp = lcons(temp, NIL);
-		if (tempcons == NIL)
-			retval = temp;
-		else
-			lnext(tempcons) = temp;
-		tempcons = temp;
-
-		temp = va_arg(args, void *);
-	}
-
-	va_end(args);
-
-	return retval;
-}
-
-/*
  *	lcons
  *
  *	Add obj to the front of list, or make a new list if 'list' is NIL
diff --git a/src/backend/parser/Makefile b/src/backend/parser/Makefile
index b9e955e..9c302b5 100644
--- a/src/backend/parser/Makefile
+++ b/src/backend/parser/Makefile
@@ -32,8 +32,8 @@ SUBSYS.o: $(OBJS)
 
 gram.c parse.h: gram.y
 	$(YACC) $(YFLAGS) $<
-	mv y.tab.c gram.c
-	mv y.tab.h parse.h
+	mv gram.tab.c gram.c
+	mv gram.tab.h parse.h
 
 scan.c:	scan.l
 	$(LEX) $<
diff --git a/src/backend/parser/analyze.c b/src/backend/parser/analyze.c
index c56db22..9f347eb 100644
--- a/src/backend/parser/analyze.c
+++ b/src/backend/parser/analyze.c
@@ -1183,7 +1183,7 @@ A_Expr_to_Expr(Node *ptr, bool *intersect_present)
 
 							expr->typeOid = BOOLOID;
 							expr->opType = OR_EXPR;
-							expr->args = makeList(lexpr, rexpr, -1);
+							expr->args = makeList2(lexpr, rexpr);
 							result = (Node *) expr;
 							break;
 						}
@@ -1195,7 +1195,7 @@ A_Expr_to_Expr(Node *ptr, bool *intersect_present)
 
 							expr->typeOid = BOOLOID;
 							expr->opType = AND_EXPR;
-							expr->args = makeList(lexpr, rexpr, -1);
+							expr->args = makeList2(lexpr, rexpr);
 							result = (Node *) expr;
 							break;
 						}
@@ -1206,7 +1206,7 @@ A_Expr_to_Expr(Node *ptr, bool *intersect_present)
 
 							expr->typeOid = BOOLOID;
 							expr->opType = NOT_EXPR;
-							expr->args = makeList(rexpr, -1);
+							expr->args = makeList1(rexpr);
 							result = (Node *) expr;
 							break;
 						}
diff --git a/src/backend/parser/gram.y b/src/backend/parser/gram.y
index 5c9e74b..5bfebef 100644
--- a/src/backend/parser/gram.y
+++ b/src/backend/parser/gram.y
@@ -992,23 +992,23 @@ default_expr:  AexprConst
 			| default_expr TYPECAST Typename
 				{
 					$3->name = fmtId($3->name);
-					$$ = nconc( lcons( makeString( "CAST"), $1), makeList( makeString("AS"), $3, -1));
+					$$ = nconc( lcons( makeString( "CAST"), $1), makeList2( makeString("AS"), $3));
 				}
 			| CAST '(' default_expr AS Typename ')'
 				{
 					$5->name = fmtId($5->name);
-					$$ = nconc( lcons( makeString( "CAST"), $3), makeList( makeString("AS"), $5, -1));
+					$$ = nconc( lcons( makeString( "CAST"), $3), makeList2( makeString("AS"), $5));
 				}
 			| '(' default_expr ')'
 				{	$$ = lappend( lcons( makeString( "("), $2), makeString( ")")); }
 			| func_name '(' ')'
 				{
-					$$ = makeList( makeString($1), makeString("("), -1);
+					$$ = makeList2( makeString($1), makeString("("));
 					$$ = lappend( $$, makeString(")"));
 				}
 			| func_name '(' default_list ')'
 				{
-					$$ = makeList( makeString($1), makeString("("), -1);
+					$$ = makeList2( makeString($1), makeString("("));
 					$$ = nconc( $$, $3);
 					$$ = lappend( $$, makeString(")"));
 				}
@@ -1144,23 +1144,23 @@ constraint_expr:  AexprConst
 			| constraint_expr TYPECAST Typename
 				{
 					$3->name = fmtId($3->name);
-					$$ = nconc( lcons( makeString( "CAST"), $1), makeList( makeString("AS"), $3, -1));
+					$$ = nconc( lcons( makeString( "CAST"), $1), makeList2( makeString("AS"), $3));
 				}
 			| CAST '(' constraint_expr AS Typename ')'
 				{
 					$5->name = fmtId($5->name);
-					$$ = nconc( lcons( makeString( "CAST"), $3), makeList( makeString("AS"), $5, -1));
+					$$ = nconc( lcons( makeString( "CAST"), $3), makeList2( makeString("AS"), $5));
 				}
 			| '(' constraint_expr ')'
 				{	$$ = lappend( lcons( makeString( "("), $2), makeString( ")")); }
 			| func_name '(' ')'
 				{
-					$$ = makeList( makeString($1), makeString("("), -1);
+					$$ = makeList2( makeString($1), makeString("("));
 					$$ = lappend( $$, makeString(")"));
 				}
 			| func_name '(' constraint_list ')'
 				{
-					$$ = makeList( makeString($1), makeString("("), -1);
+					$$ = makeList2( makeString($1), makeString("("));
 					$$ = nconc( $$, $3);
 					$$ = lappend( $$, makeString(")"));
 				}
@@ -2036,11 +2036,11 @@ oper_argtypes:	name
 				   elog(ERROR,"parser: argument type missing (use NONE for unary operators)");
 				}
 		| name ',' name
-				{ $$ = makeList(makeString($1), makeString($3), -1); }
+				{ $$ = makeList2(makeString($1), makeString($3)); }
 		| NONE ',' name			/* left unary */
-				{ $$ = makeList(NULL, makeString($3), -1); }
+				{ $$ = makeList2(NULL, makeString($3)); }
 		| name ',' NONE			/* right unary */
-				{ $$ = makeList(makeString($1), NULL, -1); }
+				{ $$ = makeList2(makeString($1), NULL); }
 		;
 
 
@@ -4642,7 +4642,7 @@ extract_arg:  datetime						{ $$ = $1; }
 		;
 
 position_list:  position_expr IN position_expr
-				{	$$ = makeList($3, $1, -1); }
+				{	$$ = makeList2($3, $1); }
 		| /*EMPTY*/
 				{	$$ = NIL; }
 		;
diff --git a/src/backend/parser/parse_expr.c b/src/backend/parser/parse_expr.c
index 955765f..7f8e977 100644
--- a/src/backend/parser/parse_expr.c
+++ b/src/backend/parser/parse_expr.c
@@ -209,7 +209,7 @@ transformExpr(ParseState *pstate, Node *expr, int precedence)
 
 							expr->typeOid = BOOLOID;
 							expr->opType = AND_EXPR;
-							expr->args = makeList(lexpr, rexpr, -1);
+							expr->args = makeList2(lexpr, rexpr);
 							result = (Node *) expr;
 						}
 						break;
@@ -227,7 +227,7 @@ transformExpr(ParseState *pstate, Node *expr, int precedence)
 									 typeidTypeName(exprType(rexpr)));
 							expr->typeOid = BOOLOID;
 							expr->opType = OR_EXPR;
-							expr->args = makeList(lexpr, rexpr, -1);
+							expr->args = makeList2(lexpr, rexpr);
 							result = (Node *) expr;
 						}
 						break;
@@ -241,7 +241,7 @@ transformExpr(ParseState *pstate, Node *expr, int precedence)
 									 typeidTypeName(exprType(rexpr)));
 							expr->typeOid = BOOLOID;
 							expr->opType = NOT_EXPR;
-							expr->args = makeList(rexpr, -1);
+							expr->args = makeList1(rexpr);
 							result = (Node *) expr;
 						}
 						break;
diff --git a/src/backend/rewrite/rewriteManip.c b/src/backend/rewrite/rewriteManip.c
index d87adef..a820e87 100644
--- a/src/backend/rewrite/rewriteManip.c
+++ b/src/backend/rewrite/rewriteManip.c
@@ -490,7 +490,7 @@ AddQual(Query *parsetree, Node *qual)
 	if (old == NULL)
 		parsetree->qual = copy;
 	else
-		parsetree->qual = (Node *) make_andclause(makeList(parsetree->qual, copy, -1));
+		parsetree->qual = (Node *) make_andclause(makeList2(parsetree->qual, copy));
 }
 
 /* Adds the given havingQual to the one already contained in the parsetree just as
@@ -513,7 +513,7 @@ AddHavingQual(Query *parsetree, Node *havingQual)
 	if (old == NULL)
 		parsetree->havingQual = copy;
 	else
-		parsetree->havingQual = (Node *) make_andclause(makeList(parsetree->havingQual, copy, -1));
+		parsetree->havingQual = (Node *) make_andclause(makeList2(parsetree->havingQual, copy));
 }
 
 #ifdef NOT_USED
@@ -717,6 +717,7 @@ ResolveNew(RewriteInfo *info, List *targetlist, Node **nodePtr,
 					else
 					{
 						*nodePtr = copyObject(n);
+						if(IsA(*nodePtr, Var ))
 						((Var *) *nodePtr)->varlevelsup = this_varlevelsup;
 					}
 				}
diff --git a/src/backend/storage/ipc/Makefile b/src/backend/storage/ipc/Makefile
index 8bd303c..6215d41 100644
--- a/src/backend/storage/ipc/Makefile
+++ b/src/backend/storage/ipc/Makefile
@@ -13,6 +13,16 @@ include ../../../Makefile.global
 
 CFLAGS += -I../..
 
+# seems to be required 1999/07/22 bjm
+ifeq ($(CPU),alpha)
+ifeq ($(CC), gcc)
+CFLAGS+= -fno-inline
+endif
+ifeq ($(CC), egcs)
+CFLAGS+= -fno-inline
+endif
+endif
+
 OBJS = ipc.o ipci.o shmem.o shmqueue.o sinval.o \
        sinvaladt.o spin.o
 
diff --git a/src/backend/storage/ipc/ipc.c b/src/backend/storage/ipc/ipc.c
index b9ec1d1..e84f2ff 100644
--- a/src/backend/storage/ipc/ipc.c
+++ b/src/backend/storage/ipc/ipc.c
@@ -438,7 +438,6 @@ static int	IpcSemaphoreLock_return;
 void
 IpcSemaphoreLock(IpcSemaphoreId semId, int sem, int lock)
 {
-	extern int	errno;
 	int			errStatus;
 	struct sembuf sops;
 
@@ -482,7 +481,6 @@ static int	IpcSemaphoreUnlock_return;
 void
 IpcSemaphoreUnlock(IpcSemaphoreId semId, int sem, int lock)
 {
-	extern int	errno;
 	int			errStatus;
 	struct sembuf sops;
 
diff --git a/src/backend/utils/adt/char.c b/src/backend/utils/adt/char.c
index 1646548..c3cc667 100644
--- a/src/backend/utils/adt/char.c
+++ b/src/backend/utils/adt/char.c
@@ -34,7 +34,7 @@ charin(char *ch)
  *		charout			- converts 'x' to "x"
  */
 char *
-charout(int32 ch)
+charout(Datum ch)
 {
 	char	   *result = (char *) palloc(2);
 
@@ -69,7 +69,7 @@ cidin(char *s)
  *		printable character...
  */
 char *
-cidout(int32 c)
+cidout(Datum c)
 {
 	char	   *result;
 	CommandId	c2;
@@ -86,69 +86,69 @@ cidout(int32 c)
  *****************************************************************************/
 
 bool
-chareq(int8 arg1, int8 arg2)
+chareq(Datum arg1, Datum arg2)
 {
-	return arg1 == arg2;
+	return (int8)arg1 == (int8)arg2;
 }
 
 bool
-charne(int8 arg1, int8 arg2)
+charne(Datum arg1, Datum arg2)
 {
-	return arg1 != arg2;
+	return (int8)arg1 != (int8)arg2;
 }
 
 bool
-charlt(int8 arg1, int8 arg2)
+charlt(Datum arg1, Datum arg2)
 {
 	return (uint8) arg1 < (uint8) arg2;
 }
 
 bool
-charle(int8 arg1, int8 arg2)
+charle(Datum arg1, Datum arg2)
 {
 	return (uint8) arg1 <= (uint8) arg2;
 }
 
 bool
-chargt(int8 arg1, int8 arg2)
+chargt(Datum arg1, Datum arg2)
 {
 	return (uint8) arg1 > (uint8) arg2;
 }
 
 bool
-charge(int8 arg1, int8 arg2)
+charge(Datum arg1, Datum arg2)
 {
 	return (uint8) arg1 >= (uint8) arg2;
 }
 
 int8
-charpl(int8 arg1, int8 arg2)
+charpl(Datum arg1, Datum arg2)
 {
-	return arg1 + arg2;
+	return (int8)arg1 + (int8)arg2;
 }
 
 int8
-charmi(int8 arg1, int8 arg2)
+charmi(Datum arg1, Datum arg2)
 {
-	return arg1 - arg2;
+	return (int8)arg1 - (int8)arg2;
 }
 
 int8
-charmul(int8 arg1, int8 arg2)
+charmul(Datum arg1, Datum arg2)
 {
-	return arg1 * arg2;
+	return (int8)arg1 * (int8)arg2;
 }
 
 int8
-chardiv(int8 arg1, int8 arg2)
+chardiv(Datum arg1, Datum arg2)
 {
-	return arg1 / arg2;
+	return (int8)arg1 / (int8)arg2;
 }
 
 bool
-cideq(int8 arg1, int8 arg2)
+cideq(Datum arg1, Datum arg2)
 {
-	return arg1 == arg2;
+	return (int8)arg1 == (int8)arg2;
 }
 
 int8
@@ -158,13 +158,13 @@ text_char(text *arg1)
 }
 
 text *
-char_text(int8 arg1)
+char_text(Datum arg1)
 {
 	text	   *result;
 
 	result = palloc(VARHDRSZ + 1);
 	VARSIZE(result) = VARHDRSZ + 1;
-	*(VARDATA(result)) = arg1;
+	*(VARDATA(result)) = (int8)arg1;
 
 	return result;
 }
diff --git a/src/backend/utils/adt/date.c b/src/backend/utils/adt/date.c
index 71cb1f1..00e384a 100644
--- a/src/backend/utils/adt/date.c
+++ b/src/backend/utils/adt/date.c
@@ -159,8 +159,9 @@ reltimein(char *str)
  *		reltimeout		- converts the internal format to a reltime string
  */
 char *
-reltimeout(RelativeTime time)
+reltimeout(Datum t)
 {
+	RelativeTime time = (RelativeTime) t;
 	char	   *result;
 	struct tm	tt,
 			   *tm = &tt;
@@ -191,8 +192,10 @@ do { \
 } while(0)
 
 static void
-reltime2tm(RelativeTime time, struct tm * tm)
+reltime2tm(RelativeTime t, struct tm * tm)
 {
+	RelativeTime time = (RelativeTime) t;
+
 	TMODULO(time, tm->tm_year, 31536000);
 	TMODULO(time, tm->tm_mon, 2592000);
 	TMODULO(time, tm->tm_mday, 86400);
@@ -357,8 +360,9 @@ timespan_reltime(TimeSpan *timespan)
 
 
 TimeSpan   *
-reltime_timespan(RelativeTime reltime)
+reltime_timespan(Datum relt)
 {
+	RelativeTime reltime = (RelativeTime) relt;
 	TimeSpan   *result;
 	int			year,
 				month;
@@ -388,8 +392,9 @@ reltime_timespan(RelativeTime reltime)
  *		mktinterval		- creates a time interval with endpoints t1 and t2
  */
 TimeInterval
-mktinterval(AbsoluteTime t1, AbsoluteTime t2)
+mktinterval(Datum d1, Datum d2)
 {
+	AbsoluteTime t1 = d1, t2 = d2;
 	AbsoluteTime tstart = ABSTIMEMIN(t1, t2),
 				tend = ABSTIMEMAX(t1, t2);
 	TimeInterval interval;
@@ -418,8 +423,10 @@ mktinterval(AbsoluteTime t1, AbsoluteTime t2)
  *		timepl			- returns the value of (abstime t1 + relime t2)
  */
 AbsoluteTime
-timepl(AbsoluteTime t1, RelativeTime t2)
+timepl(Datum d1, Datum d2)
 {
+	AbsoluteTime t1 = d1;
+	RelativeTime t2 = d2;
 	if (t1 == CURRENT_ABSTIME)
 		t1 = GetCurrentTransactionStartTime();
 
@@ -437,8 +444,11 @@ timepl(AbsoluteTime t1, RelativeTime t2)
  *		timemi			- returns the value of (abstime t1 - reltime t2)
  */
 AbsoluteTime
-timemi(AbsoluteTime t1, RelativeTime t2)
+timemi(Datum d1, Datum d2)
 {
+	AbsoluteTime t1 = d1;
+	RelativeTime t2 = d2;
+
 	if (t1 == CURRENT_ABSTIME)
 		t1 = GetCurrentTransactionStartTime();
 
@@ -456,8 +466,10 @@ timemi(AbsoluteTime t1, RelativeTime t2)
  *		abstimemi		- returns the value of (abstime t1 - abstime t2)
  */
 static RelativeTime
-abstimemi(AbsoluteTime t1, AbsoluteTime t2)
+abstimemi(Datum d1, Datum d2)
 {
+	AbsoluteTime t1 = d1, t2 = d2;
+
 	if (t1 == CURRENT_ABSTIME)
 		t1 = GetCurrentTransactionStartTime();
 	if (t2 == CURRENT_ABSTIME)
@@ -475,8 +487,10 @@ abstimemi(AbsoluteTime t1, AbsoluteTime t2)
  *		ininterval		- returns 1, iff absolute date is in the interval
  */
 int
-ininterval(AbsoluteTime t, TimeInterval interval)
+ininterval(Datum d, TimeInterval interval)
 {
+	AbsoluteTime t = d;
+
 	if (interval->status == T_INTERVAL_VALID && t != INVALID_ABSTIME)
 		return (abstimege(t, interval->data[0]) &&
 				abstimele(t, interval->data[1]));
@@ -489,6 +503,7 @@ ininterval(AbsoluteTime t, TimeInterval interval)
 RelativeTime
 intervalrel(TimeInterval interval)
 {
+
 	if (interval->status == T_INTERVAL_VALID)
 		return abstimemi(interval->data[1], interval->data[0]);
 	else
@@ -519,51 +534,57 @@ timenow()
  *		reltimege		- returns 1, iff t1 greater than or equal to t2
  */
 bool
-reltimeeq(RelativeTime t1, RelativeTime t2)
+reltimeeq(Datum t1, Datum t2)
 {
-	if (t1 == INVALID_RELTIME || t2 == INVALID_RELTIME)
+	if ((RelativeTime)t1 == INVALID_RELTIME 
+	||  (RelativeTime)t2 == INVALID_RELTIME)
 		return 0;
-	return t1 == t2;
+	return (RelativeTime)t1 == (RelativeTime)t2;
 }
 
 bool
-reltimene(RelativeTime t1, RelativeTime t2)
+reltimene(Datum t1, Datum t2)
 {
-	if (t1 == INVALID_RELTIME || t2 == INVALID_RELTIME)
+	if ((RelativeTime)t1 == INVALID_RELTIME 
+	||  (RelativeTime)t2 == INVALID_RELTIME)
 		return 0;
-	return t1 != t2;
+	return (RelativeTime)t1 != (RelativeTime)t2;
 }
 
 bool
-reltimelt(RelativeTime t1, RelativeTime t2)
+reltimelt(Datum t1, Datum t2)
 {
-	if (t1 == INVALID_RELTIME || t2 == INVALID_RELTIME)
+	if ((RelativeTime)t1 == INVALID_RELTIME 
+	||  (RelativeTime)t2 == INVALID_RELTIME)
 		return 0;
-	return t1 < t2;
+	return (RelativeTime)t1 < (RelativeTime)t2;
 }
 
 bool
-reltimegt(RelativeTime t1, RelativeTime t2)
+reltimegt(Datum t1, Datum t2)
 {
-	if (t1 == INVALID_RELTIME || t2 == INVALID_RELTIME)
+	if ((RelativeTime)t1 == INVALID_RELTIME 
+	||  (RelativeTime)t2 == INVALID_RELTIME)
 		return 0;
-	return t1 > t2;
+	return (RelativeTime)t1 > (RelativeTime)t2;
 }
 
 bool
-reltimele(RelativeTime t1, RelativeTime t2)
+reltimele(Datum t1, Datum t2)
 {
-	if (t1 == INVALID_RELTIME || t2 == INVALID_RELTIME)
+	if ((RelativeTime)t1 == INVALID_RELTIME 
+	||  (RelativeTime)t2 == INVALID_RELTIME)
 		return 0;
-	return t1 <= t2;
+	return (RelativeTime)t1 <= (RelativeTime)t2;
 }
 
 bool
-reltimege(RelativeTime t1, RelativeTime t2)
+reltimege(Datum t1, Datum t2)
 {
-	if (t1 == INVALID_RELTIME || t2 == INVALID_RELTIME)
+	if ((RelativeTime)t1 == INVALID_RELTIME 
+	||  (RelativeTime)t2 == INVALID_RELTIME)
 		return 0;
-	return t1 >= t2;
+	return (RelativeTime)t1 >= (RelativeTime)t2;
 }
 
 
@@ -803,8 +824,9 @@ intervalge(TimeInterval i1, TimeInterval i2)
  *								reltime t
  */
 bool
-intervalleneq(TimeInterval i, RelativeTime t)
+intervalleneq(TimeInterval i, Datum d)
 {
+	RelativeTime t = d;
 	RelativeTime rt;
 
 	if ((i->status == T_INTERVAL_INVAL) || (t == INVALID_RELTIME))
@@ -818,8 +840,9 @@ intervalleneq(TimeInterval i, RelativeTime t)
  *								to reltime t
  */
 bool
-intervallenne(TimeInterval i, RelativeTime t)
+intervallenne(TimeInterval i, Datum d)
 {
+	RelativeTime t = d;
 	RelativeTime rt;
 
 	if ((i->status == T_INTERVAL_INVAL) || (t == INVALID_RELTIME))
@@ -833,8 +856,9 @@ intervallenne(TimeInterval i, RelativeTime t)
  *								reltime t
  */
 bool
-intervallenlt(TimeInterval i, RelativeTime t)
+intervallenlt(TimeInterval i, Datum d)
 {
+	RelativeTime t = d;
 	RelativeTime rt;
 
 	if ((i->status == T_INTERVAL_INVAL) || (t == INVALID_RELTIME))
@@ -848,8 +872,9 @@ intervallenlt(TimeInterval i, RelativeTime t)
  *								reltime t
  */
 bool
-intervallengt(TimeInterval i, RelativeTime t)
+intervallengt(TimeInterval i, Datum d)
 {
+	RelativeTime t = d;
 	RelativeTime rt;
 
 	if ((i->status == T_INTERVAL_INVAL) || (t == INVALID_RELTIME))
@@ -863,8 +888,9 @@ intervallengt(TimeInterval i, RelativeTime t)
  *									than reltime t
  */
 bool
-intervallenle(TimeInterval i, RelativeTime t)
+intervallenle(TimeInterval i, Datum d)
 {
+	RelativeTime t = d;
 	RelativeTime rt;
 
 	if ((i->status == T_INTERVAL_INVAL) || (t == INVALID_RELTIME))
@@ -878,8 +904,9 @@ intervallenle(TimeInterval i, RelativeTime t)
  *								equal than reltime t
  */
 bool
-intervallenge(TimeInterval i, RelativeTime t)
+intervallenge(TimeInterval i, Datum d)
 {
+	RelativeTime t = d;
 	RelativeTime rt;
 
 	if ((i->status == T_INTERVAL_INVAL) || (t == INVALID_RELTIME))
diff --git a/src/backend/utils/adt/float.c b/src/backend/utils/adt/float.c
index f9bf226..c715ba7 100644
--- a/src/backend/utils/adt/float.c
+++ b/src/backend/utils/adt/float.c
@@ -130,7 +130,7 @@ extern double rint(double x);
  * until the distributions are updated.
  *								--djm 12/16/96
  */
-#if ( defined(linux) && defined(__alpha__) ) && !defined(UNSAFE_FLOATS)
+#if ( defined(linux) && defined(__alpha__) ) && !defined(UNSAFE_FLOATS) && 0
 #define UNSAFE_FLOATS
 #endif
 
@@ -851,9 +851,10 @@ dtoi2(float64 num)
  *		i4tod			- converts an int4 number to a float8 number
  */
 float64
-i4tod(int32 num)
+i4tod(Datum n)
 {
 	float64		result;
+	int32	num = (int32) n;
 
 	result = (float64) palloc(sizeof(float64data));
 
@@ -866,9 +867,10 @@ i4tod(int32 num)
  *		i2tod			- converts an int2 number to a float8 number
  */
 float64
-i2tod(int16 num)
+i2tod(Datum n)
 {
 	float64		result;
+	int16	num = (int16) n;
 
 	result = (float64) palloc(sizeof(float64data));
 
@@ -919,9 +921,10 @@ ftoi2(float32 num)
  *		i4tof			- converts an int4 number to a float8 number
  */
 float32
-i4tof(int32 num)
+i4tof(Datum n)
 {
 	float32		result;
+	int32	num = (int32) n;
 
 	result = (float32) palloc(sizeof(float32data));
 
@@ -934,9 +937,10 @@ i4tof(int32 num)
  *		i2tof			- converts an int2 number to a float8 number
  */
 float32
-i2tof(int16 num)
+i2tof(Datum n)
 {
 	float32		result;
+	int16	num = (int16) n;
 
 	result = (float32) palloc(sizeof(float32data));
 
diff --git a/src/backend/utils/adt/int.c b/src/backend/utils/adt/int.c
index 09ce93b..9577e31 100644
--- a/src/backend/utils/adt/int.c
+++ b/src/backend/utils/adt/int.c
@@ -60,7 +60,7 @@ int2in(char *num)
  *		int2out			- converts short to "num"
  */
 char *
-int2out(int16 sh)
+int2out(Datum sh)
 {
 	char	   *result;
 
@@ -205,12 +205,12 @@ int4in(char *num)
  *		int4out			- converts int4 to "num"
  */
 char *
-int4out(int32 l)
+int4out(Datum l)
 {
 	char	   *result;
 
 	result = (char *) palloc(12);		/* assumes sign, 10 digits, '\0' */
-	ltoa(l, result);
+	ltoa((int32)l, result);
 	return result;
 }
 
@@ -222,14 +222,16 @@ int4out(int32 l)
  */
 
 int32
-i2toi4(int16 arg1)
+i2toi4(Datum arg1)
 {
 	return (int32) arg1;
 }
 
 int16
-i4toi2(int32 arg1)
+i4toi2(Datum arg)
 {
+	int32 arg1 = (int32) arg;
+
 	if (arg1 < SHRT_MIN)
 		elog(ERROR, "i4toi2: '%d' causes int2 underflow", arg1);
 	if (arg1 > SHRT_MAX)
@@ -239,7 +241,7 @@ i4toi2(int32 arg1)
 }
 
 text *
-int2_text(int16 arg1)
+int2_text(Datum arg1)
 {
 	text	   *result;
 
@@ -280,7 +282,7 @@ text_int2(text *string)
 }	/* text_int2() */
 
 text *
-int4_text(int32 arg1)
+int4_text(Datum arg1)
 {
 	text	   *result;
 
@@ -336,154 +338,154 @@ text_int4(text *string)
  *		intge			- returns 1 iff arg1 >= arg2
  */
 bool
-int4eq(int32 arg1, int32 arg2)
+int4eq(Datum arg1, Datum arg2)
 {
-	return arg1 == arg2;
+	return (int32)arg1 == (int32)arg2;
 }
 
 bool
-int4ne(int32 arg1, int32 arg2)
+int4ne(Datum arg1, Datum arg2)
 {
-	return arg1 != arg2;
+	return (int32)arg1 != (int32)arg2;
 }
 
 bool
-int4lt(int32 arg1, int32 arg2)
+int4lt(Datum arg1, Datum arg2)
 {
-	return arg1 < arg2;
+	return (int32)arg1 < (int32)arg2;
 }
 
 bool
-int4le(int32 arg1, int32 arg2)
+int4le(Datum arg1, Datum arg2)
 {
-	return arg1 <= arg2;
+	return (int32)arg1 <= (int32)arg2;
 }
 
 bool
-int4gt(int32 arg1, int32 arg2)
+int4gt(Datum arg1, Datum arg2)
 {
-	return arg1 > arg2;
+	return (int32)arg1 > (int32)arg2;
 }
 
 bool
-int4ge(int32 arg1, int32 arg2)
+int4ge(Datum arg1, Datum arg2)
 {
-	return arg1 >= arg2;
+	return (int32)arg1 >= (int32)arg2;
 }
 
 bool
-int2eq(int16 arg1, int16 arg2)
+int2eq(Datum arg1, Datum arg2)
 {
-	return arg1 == arg2;
+	return (int16)arg1 == (int16)arg2;
 }
 
 bool
-int2ne(int16 arg1, int16 arg2)
+int2ne(Datum arg1, Datum arg2)
 {
-	return arg1 != arg2;
+	return (int16)arg1 != (int16)arg2;
 }
 
 bool
-int2lt(int16 arg1, int16 arg2)
+int2lt(Datum arg1, Datum arg2)
 {
-	return arg1 < arg2;
+	return (int16)arg1 < (int16)arg2;
 }
 
 bool
-int2le(int16 arg1, int16 arg2)
+int2le(Datum arg1, Datum arg2)
 {
-	return arg1 <= arg2;
+	return (int16)arg1 <= (int16)arg2;
 }
 
 bool
-int2gt(int16 arg1, int16 arg2)
+int2gt(Datum arg1, Datum arg2)
 {
-	return arg1 > arg2;
+	return (int16)arg1 > (int16)arg2;
 }
 
 bool
-int2ge(int16 arg1, int16 arg2)
+int2ge(Datum arg1, Datum arg2)
 {
-	return arg1 >= arg2;
+	return (int16)arg1 >= (int16)arg2;
 }
 
 bool
-int24eq(int32 arg1, int32 arg2)
+int24eq(Datum arg1, Datum arg2)
 {
-	return arg1 == arg2;
+	return (int32)arg1 == (int32)arg2;
 }
 
 bool
-int24ne(int32 arg1, int32 arg2)
+int24ne(Datum arg1, Datum arg2)
 {
-	return arg1 != arg2;
+	return (int32)arg1 != (int32)arg2;
 }
 
 bool
-int24lt(int32 arg1, int32 arg2)
+int24lt(Datum arg1, Datum arg2)
 {
-	return arg1 < arg2;
+	return (int32)arg1 < (int32)arg2;
 }
 
 bool
-int24le(int32 arg1, int32 arg2)
+int24le(Datum arg1, Datum arg2)
 {
-	return arg1 <= arg2;
+	return (int32)arg1 <= (int32)arg2;
 }
 
 bool
-int24gt(int32 arg1, int32 arg2)
+int24gt(Datum arg1, Datum arg2)
 {
-	return arg1 > arg2;
+	return (int32)arg1 > (int32)arg2;
 }
 
 bool
-int24ge(int32 arg1, int32 arg2)
+int24ge(Datum arg1, Datum arg2)
 {
-	return arg1 >= arg2;
+	return (int32)arg1 >= (int32)arg2;
 }
 
 bool
-int42eq(int32 arg1, int32 arg2)
+int42eq(Datum arg1, Datum arg2)
 {
-	return arg1 == arg2;
+	return (int32)arg1 == (int32)arg2;
 }
 
 bool
-int42ne(int32 arg1, int32 arg2)
+int42ne(Datum arg1, Datum arg2)
 {
-	return arg1 != arg2;
+	return (int32)arg1 != (int32)arg2;
 }
 
 bool
-int42lt(int32 arg1, int32 arg2)
+int42lt(Datum arg1, Datum arg2)
 {
-	return arg1 < arg2;
+	return (int32)arg1 < (int32)arg2;
 }
 
 bool
-int42le(int32 arg1, int32 arg2)
+int42le(Datum arg1, Datum arg2)
 {
-	return arg1 <= arg2;
+	return (int32)arg1 <= (int32)arg2;
 }
 
 bool
-int42gt(int32 arg1, int32 arg2)
+int42gt(Datum arg1, Datum arg2)
 {
-	return arg1 > arg2;
+	return (int32)arg1 > (int32)arg2;
 }
 
 bool
-int42ge(int32 arg1, int32 arg2)
+int42ge(Datum arg1, Datum arg2)
 {
-	return arg1 >= arg2;
+	return (int32)arg1 >= (int32)arg2;
 }
 
 
 bool
-keyfirsteq(int16 *arg1, int16 arg2)
+keyfirsteq(int16 *arg1, Datum arg2)
 {
-	return *arg1 == arg2;
+	return *arg1 == (int16)arg2;
 }
 
 /*
@@ -493,159 +495,160 @@ keyfirsteq(int16 *arg1, int16 arg2)
  *		int[24]div		- returns arg1 / arg2
  */
 int32
-int4um(int32 arg)
+int4um(Datum arg)
 {
-	return -arg;
+	return (int32)-arg;
 }
 
 int32
-int4pl(int32 arg1, int32 arg2)
+int4pl(Datum arg1, Datum arg2)
 {
-	return arg1 + arg2;
+	return (int32)arg1 + (int32)arg2;
 }
 
 int32
-int4mi(int32 arg1, int32 arg2)
+int4mi(Datum arg1, Datum arg2)
 {
-	return arg1 - arg2;
+	return (int32)arg1 - (int32)arg2;
 }
 
 int32
-int4mul(int32 arg1, int32 arg2)
+int4mul(Datum arg1, Datum arg2)
 {
-	return arg1 * arg2;
+	return (int32)arg1 * (int32)arg2;
 }
 
 int32
-int4div(int32 arg1, int32 arg2)
+int4div(Datum arg1, Datum arg2)
 {
-	return arg1 / arg2;
+	return (int32)arg1 / (int32)arg2;
 }
 
 int32
-int4inc(int32 arg)
+int4inc(Datum arg)
 {
-	return arg + (int32) 1;
+	return (int32)++arg;
 }
 
 int16
-int2um(int16 arg)
+int2um(Datum arg)
 {
-	return -arg;
+	return (int16)-arg;
 }
 
 int16
-int2pl(int16 arg1, int16 arg2)
+int2pl(Datum arg1, Datum arg2)
 {
-	return arg1 + arg2;
+	return (int16)arg1 + (int16)arg2;
 }
 
 int16
-int2mi(int16 arg1, int16 arg2)
+int2mi(Datum arg1, Datum arg2)
 {
-	return arg1 - arg2;
+	return (int16)arg1 - (int16)arg2;
 }
 
 int16
-int2mul(int16 arg1, int16 arg2)
+int2mul(Datum arg1, Datum arg2)
 {
-	return arg1 * arg2;
+	return (int16)arg1 * (int16)arg2;
 }
 
 int16
-int2div(int16 arg1, int16 arg2)
+int2div(Datum arg1, Datum arg2)
 {
-	return arg1 / arg2;
+	return (int16)arg1 / (int16)arg2;
 }
 
 int16
-int2inc(int16 arg)
+int2inc(Datum arg)
 {
-	return arg + (int16) 1;
+	return (int16)++arg;
 }
 
 int32
-int24pl(int32 arg1, int32 arg2)
+int24pl(Datum arg1, Datum arg2)
 {
-	return arg1 + arg2;
+	return (int32)arg1 + (int32)arg2;
 }
 
 int32
-int24mi(int32 arg1, int32 arg2)
+int24mi(Datum arg1, Datum arg2)
 {
-	return arg1 - arg2;
+	return (int32)arg1 - (int32)arg2;
 }
 
 int32
-int24mul(int32 arg1, int32 arg2)
+int24mul(Datum arg1, Datum arg2)
 {
-	return arg1 * arg2;
+	return (int32)arg1 * (int32)arg2;
 }
 
 int32
-int24div(int32 arg1, int32 arg2)
+int24div(Datum arg1, Datum arg2)
 {
-	return arg1 / arg2;
+	return (int32)arg1 / (int32)arg2;
 }
 
 int32
-int42pl(int32 arg1, int32 arg2)
+int42pl(Datum arg1, Datum arg2)
 {
-	return arg1 + arg2;
+	return (int32)arg1 + (int32)arg2;
 }
 
 int32
-int42mi(int32 arg1, int32 arg2)
+int42mi(Datum arg1, Datum arg2)
 {
-	return arg1 - arg2;
+	return (int32)arg1 - (int32)arg2;
 }
 
 int32
-int42mul(int32 arg1, int32 arg2)
+int42mul(Datum arg1, Datum arg2)
 {
-	return arg1 * arg2;
+	return (int32)arg1 * (int32)arg2;
 }
 
 int32
-int42div(int32 arg1, int32 arg2)
+int42div(Datum arg1, Datum arg2)
 {
-	return arg1 / arg2;
+	return (int32)arg1 / (int32)arg2;
 }
 
 /*
  *		int[24]mod		- returns arg1 mod arg2
  */
 int32
-int4mod(int32 arg1, int32 arg2)
+int4mod(Datum arg1, Datum arg2)
 {
-	return arg1 % arg2;
+	return (int32)arg1 % (int32)arg2;
 }
 
 int32
-int2mod(int16 arg1, int16 arg2)
+int2mod(Datum arg1, Datum arg2)
 {
-	return arg1 % arg2;
+	return (int16)arg1 % (int16)arg2;
 }
 
 int32
-int24mod(int32 arg1, int32 arg2)
+int24mod(Datum arg1, Datum arg2)
 {
-	return arg1 % arg2;
+	return (int32)arg1 % (int32)arg2;
 }
 
 int32
-int42mod(int32 arg1, int32 arg2)
+int42mod(Datum arg1, Datum arg2)
 {
-	return arg1 % arg2;
+	return (int32)arg1 % (int32)arg2;
 }
 
 /*
  *		int[24]fac		- returns arg1!
  */
 int32
-int4fac(int32 arg1)
+int4fac(Datum arg)
 {
 	int32		result;
+	int32	arg1 = (int32) arg;
 
 	if (arg1 < 1)
 		result = 0;
@@ -656,9 +659,10 @@ int4fac(int32 arg1)
 }
 
 int32
-int2fac(int16 arg1)
+int2fac(Datum arg)
 {
 	int16		result;
+	int16		arg1 = (int16) arg;
 
 	if (arg1 < 1)
 		result = 0;
@@ -669,25 +673,25 @@ int2fac(int16 arg1)
 }
 
 int16
-int2larger(int16 arg1, int16 arg2)
+int2larger(Datum arg1, Datum arg2)
 {
-	return (arg1 > arg2) ? arg1 : arg2;
+	return ((int16)arg1 > (int16)arg2) ? (int16)arg1 : (int16)arg2;
 }
 
 int16
-int2smaller(int16 arg1, int16 arg2)
+int2smaller(Datum arg1, Datum arg2)
 {
-	return (arg1 < arg2) ? arg1 : arg2;
+	return ((int16)arg1 < (int16)arg2) ? (int16)arg1 : (int16)arg2;
 }
 
 int32
-int4larger(int32 arg1, int32 arg2)
+int4larger(Datum arg1, Datum arg2)
 {
-	return (arg1 > arg2) ? arg1 : arg2;
+	return ((int32)arg1 > (int32)arg2) ? (int32)arg1 : (int32)arg2;
 }
 
 int32
-int4smaller(int32 arg1, int32 arg2)
+int4smaller(Datum arg1, Datum arg2)
 {
-	return (arg1 < arg2) ? arg1 : arg2;
+	return ((int32)arg1 < (int32)arg2) ? (int32)arg1 : (int32)arg2;
 }
diff --git a/src/backend/utils/adt/nabstime.c b/src/backend/utils/adt/nabstime.c
index 015c7bb..da0503a 100644
--- a/src/backend/utils/adt/nabstime.c
+++ b/src/backend/utils/adt/nabstime.c
@@ -124,11 +124,11 @@ GetCurrentTime(struct tm * tm)
 
 
 void
-abstime2tm(AbsoluteTime time, int *tzp, struct tm * tm, char *tzn)
+abstime2tm(Datum time, int *tzp, struct tm * tm, char *tzn)
 {
 #ifdef USE_POSIX_TIME
 	struct tm  *tx;
-
+	time_t	t = (time_t) time;
 #else							/* ! USE_POSIX_TIME */
 	struct timeb tb;			/* the old V7-ism */
 
@@ -137,10 +137,10 @@ abstime2tm(AbsoluteTime time, int *tzp, struct tm * tm, char *tzn)
 
 #ifdef USE_POSIX_TIME
 	if (tzp != NULL)
-		tx = localtime((time_t *) &time);
+		tx = localtime( &t );
 	else
 	{
-		tx = gmtime((time_t *) &time);
+		tx = gmtime( &t );
 	};
 #endif
 
@@ -210,8 +210,8 @@ abstime2tm(AbsoluteTime time, int *tzp, struct tm * tm, char *tzn)
 static AbsoluteTime
 tm2abstime(struct tm * tm, int tz)
 {
-	int			day,
-				sec;
+	int			day;
+	AbsoluteTime		sec;
 
 	/* validate, before going out of range on some members */
 	if (tm->tm_year < 1901 || tm->tm_year > 2038
@@ -317,8 +317,9 @@ nabstimein(char *str)
  * Given an AbsoluteTime return the English text version of the date
  */
 char *
-nabstimeout(AbsoluteTime time)
+nabstimeout(Datum t)
 {
+	AbsoluteTime time = (AbsoluteTime) t;
 	char	   *result;
 	int			tz;
 	double		fsec = 0;
@@ -363,8 +364,10 @@ nabstimeout(AbsoluteTime time)
  *	AbsoluteTimeIsBefore -- true iff time1 is after time2.
  */
 bool
-AbsoluteTimeIsBefore(AbsoluteTime time1, AbsoluteTime time2)
+AbsoluteTimeIsBefore(Datum t1, Datum t2)
 {
+	AbsoluteTime time1 = t1,  time2 = t2;
+
 	Assert(AbsoluteTimeIsValid(time1));
 	Assert(AbsoluteTimeIsValid(time2));
 
@@ -379,8 +382,10 @@ AbsoluteTimeIsBefore(AbsoluteTime time1, AbsoluteTime time2)
 
 #ifdef NOT_USED
 bool
-AbsoluteTimeIsAfter(AbsoluteTime time1, AbsoluteTime time2)
+AbsoluteTimeIsAfter(Datum t1, Datum t2)
 {
+	AbsoluteTime time1 = t1,  time2 = t2;
+
 	Assert(AbsoluteTimeIsValid(time1));
 	Assert(AbsoluteTimeIsValid(time2));
 
@@ -398,8 +403,10 @@ AbsoluteTimeIsAfter(AbsoluteTime time1, AbsoluteTime time2)
 /* abstime_finite()
  */
 bool
-abstime_finite(AbsoluteTime abstime)
+abstime_finite(Datum d)
 {
+	AbsoluteTime abstime = (AbsoluteTime) d;
+
 	return ((abstime != INVALID_ABSTIME)
 		  && (abstime != NOSTART_ABSTIME) && (abstime != NOEND_ABSTIME));
 }	/* abstime_finite() */
@@ -414,8 +421,10 @@ abstime_finite(AbsoluteTime abstime)
  *		abstimege		- returns 1, iff t1 greater than or equal to t2
  */
 bool
-abstimeeq(AbsoluteTime t1, AbsoluteTime t2)
+abstimeeq(Datum d1, Datum d2)
 {
+	AbsoluteTime t1 = d1, t2 = d2;
+
 	if (t1 == INVALID_ABSTIME || t2 == INVALID_ABSTIME)
 		return FALSE;
 	if (t1 == CURRENT_ABSTIME)
@@ -427,8 +436,10 @@ abstimeeq(AbsoluteTime t1, AbsoluteTime t2)
 }
 
 bool
-abstimene(AbsoluteTime t1, AbsoluteTime t2)
+abstimene(Datum d1, Datum d2)
 {
+	AbsoluteTime t1 = d1, t2 = d2;
+
 	if (t1 == INVALID_ABSTIME || t2 == INVALID_ABSTIME)
 		return FALSE;
 	if (t1 == CURRENT_ABSTIME)
@@ -440,8 +451,10 @@ abstimene(AbsoluteTime t1, AbsoluteTime t2)
 }
 
 bool
-abstimelt(AbsoluteTime t1, AbsoluteTime t2)
+abstimelt(Datum d1, Datum d2)
 {
+	AbsoluteTime t1 = d1, t2 = d2;
+
 	if (t1 == INVALID_ABSTIME || t2 == INVALID_ABSTIME)
 		return FALSE;
 	if (t1 == CURRENT_ABSTIME)
@@ -453,8 +466,10 @@ abstimelt(AbsoluteTime t1, AbsoluteTime t2)
 }
 
 bool
-abstimegt(AbsoluteTime t1, AbsoluteTime t2)
+abstimegt(Datum d1, Datum d2)
 {
+	AbsoluteTime t1 = d1, t2 = d2;
+
 	if (t1 == INVALID_ABSTIME || t2 == INVALID_ABSTIME)
 		return FALSE;
 	if (t1 == CURRENT_ABSTIME)
@@ -466,8 +481,10 @@ abstimegt(AbsoluteTime t1, AbsoluteTime t2)
 }
 
 bool
-abstimele(AbsoluteTime t1, AbsoluteTime t2)
+abstimele(Datum d1, Datum d2)
 {
+	AbsoluteTime t1 = d1, t2 = d2;
+
 	if (t1 == INVALID_ABSTIME || t2 == INVALID_ABSTIME)
 		return FALSE;
 	if (t1 == CURRENT_ABSTIME)
@@ -479,8 +496,10 @@ abstimele(AbsoluteTime t1, AbsoluteTime t2)
 }
 
 bool
-abstimege(AbsoluteTime t1, AbsoluteTime t2)
+abstimege(Datum d1, Datum d2)
 {
+	AbsoluteTime t1 = d1, t2 = d2;
+
 	if (t1 == INVALID_ABSTIME || t2 == INVALID_ABSTIME)
 		return FALSE;
 	if (t1 == CURRENT_ABSTIME)
@@ -550,8 +569,9 @@ datetime_abstime(DateTime *datetime)
  * Convert abstime to datetime.
  */
 DateTime   *
-abstime_datetime(AbsoluteTime abstime)
+abstime_datetime(Datum a)
 {
+	AbsoluteTime abstime = (AbsoluteTime) a;
 	DateTime   *result;
 
 	if (!PointerIsValid(result = palloc(sizeof(DateTime))))
diff --git a/src/backend/utils/adt/numeric.c b/src/backend/utils/adt/numeric.c
index eaee00f..0b9a15c 100644
--- a/src/backend/utils/adt/numeric.c
+++ b/src/backend/utils/adt/numeric.c
@@ -166,7 +166,7 @@ static void sub_abs(NumericVar *var1, NumericVar *var2, NumericVar *result);
  * ----------
  */
 Numeric
-numeric_in(char *str, int dummy, int32 typmod)
+numeric_in(char *str, int dummy, Datum typmod)
 {
 	NumericVar	value;
 	Numeric		res;
@@ -196,7 +196,7 @@ numeric_in(char *str, int dummy, int32 typmod)
 	init_var(&value);
 	set_var_from_str(str, &value);
 
-	apply_typmod(&value, typmod);
+	apply_typmod(&value, (int32)typmod);
 
 	res = make_result(&value);
 	free_var(&value);
@@ -1643,8 +1643,9 @@ numeric_power(Numeric num1, Numeric num2)
  * ----------------------------------------------------------------------
  */
 Numeric
-int4_numeric(int32 val)
+int4_numeric(Datum v)
 {
+	int32 val = v;
 	Numeric		res;
 	NumericVar	result;
 	char	   *tmp;
diff --git a/src/backend/utils/adt/oid.c b/src/backend/utils/adt/oid.c
index 2e335dd..01fd324 100644
--- a/src/backend/utils/adt/oid.c
+++ b/src/backend/utils/adt/oid.c
@@ -175,17 +175,17 @@ oid8gt(Oid *arg1, Oid *arg2)
 }
 
 bool
-oideqint4(Oid arg1, int32 arg2)
+oideqint4(Oid arg1, Datum arg2)
 {
 /* oid is unsigned, but int4 is signed */
-	return arg2 >= 0 && arg1 == arg2;
+	return (int32)arg2 >= 0 && arg1 == (int32)arg2;
 }
 
 bool
-int4eqoid(int32 arg1, Oid arg2)
+int4eqoid(Datum arg1, Oid arg2)
 {
 /* oid is unsigned, but int4 is signed */
-	return arg1 >= 0 && arg1 == arg2;
+	return (int32)arg1 >= 0 && (int32)arg1 == arg2;
 }
 
 text *
diff --git a/src/backend/utils/adt/varchar.c b/src/backend/utils/adt/varchar.c
index cbe7cd1..336e510 100644
--- a/src/backend/utils/adt/varchar.c
+++ b/src/backend/utils/adt/varchar.c
@@ -60,8 +60,9 @@ char	   *convertstr(char *, int, int);
  *	  because we pass typelem as the second argument for array_in.)
  */
 char *
-bpcharin(char *s, int dummy, int32 atttypmod)
+bpcharin(char *s, Datum dummy, Datum a)
 {
+	int32 atttypmod = a;
 	char	   *result,
 			   *r;
 	int			len;
@@ -137,8 +138,9 @@ bpcharout(char *s)
  * len is the length specified in () plus VARHDRSZ bytes.
  */
 char *
-bpchar(char *s, int32 len)
+bpchar(char *s, Datum l)
 {
+	int32 len = l;
 	char	   *result,
 			   *r;
 	int			rlen,
@@ -212,9 +214,9 @@ bpchar(char *s, int32 len)
  * len is the length specified in () plus VARHDRSZ bytes.
  */
 ArrayType  *
-_bpchar(ArrayType *v, int32 len)
+_bpchar(ArrayType *v, Datum len)
 {
-	return array_map(v, BPCHAROID, bpchar, BPCHAROID, 1, len);
+	return array_map(v, BPCHAROID, bpchar, BPCHAROID, 1, (int32)len);
 }
 
 
@@ -231,7 +233,7 @@ bpchar_char(char *s)
  * Convert char to bpchar(1).
  */
 char *
-char_bpchar(int32 c)
+char_bpchar(Datum c)
 {
 	char	   *result;
 
@@ -323,8 +325,9 @@ name_bpchar(NameData *s)
  *	  because we pass typelem as the second argument for array_in.)
  */
 char *
-varcharin(char *s, int dummy, int32 atttypmod)
+varcharin(char *s, int dummy, Datum a)
 {
+	int32 atttypmod = a;
 	char	   *result;
 	int			len;
 
@@ -381,8 +384,9 @@ varcharout(char *s)
  * slen is the length specified in () plus VARHDRSZ bytes.
  */
 char *
-varchar(char *s, int32 slen)
+varchar(char *s, Datum ds)
 {
+	int32	slen = ds;
 	char	   *result;
 	int			len;
 
@@ -423,9 +427,9 @@ varchar(char *s, int32 slen)
  * len is the length specified in () plus VARHDRSZ bytes.
  */
 ArrayType  *
-_varchar(ArrayType *v, int32 len)
+_varchar(ArrayType *v, Datum len)
 {
-	return array_map(v, VARCHAROID, varchar, VARCHAROID, 1, len);
+	return array_map(v, VARCHAROID, varchar, VARCHAROID, 1, (int32)len);
 }
 
 
diff --git a/src/backend/utils/adt/varlena.c b/src/backend/utils/adt/varlena.c
index e6a90d7..b233c3e 100644
--- a/src/backend/utils/adt/varlena.c
+++ b/src/backend/utils/adt/varlena.c
@@ -325,8 +325,9 @@ textcat(text *t1, text *t2)
  * - Thomas Lockhart 1998-12-10
  */
 text *
-text_substr(text *string, int32 m, int32 n)
+text_substr(text *string, Datum dm, Datum dn)
 {
+	int32 m = dm, n = dn;
 	text	   *ret;
 	int			len;
 
diff --git a/src/backend/utils/error/elog.c b/src/backend/utils/error/elog.c
index b2a44f3..2882f56 100644
--- a/src/backend/utils/error/elog.c
+++ b/src/backend/utils/error/elog.c
@@ -63,8 +63,6 @@ elog(int lev, const char *fmt,...)
 				line[ELOG_MAXLEN];
 	char	   *bp;
 	const char *cp;
-	extern int	errno,
-				sys_nerr;
 
 #ifdef USE_SYSLOG
 	int			log_level;
diff --git a/src/backend/utils/error/exc.c b/src/backend/utils/error/exc.c
index 357dae1..777de6e 100644
--- a/src/backend/utils/error/exc.c
+++ b/src/backend/utils/error/exc.c
@@ -99,8 +99,6 @@ ExcPrint(Exception *excP,
 		 ExcData data,
 		 ExcMessage message)
 {
-	extern int	errno;
-	extern int	sys_nerr;
 
 #ifdef	lint
 	data = data;
diff --git a/src/backend/utils/sort/psort.c b/src/backend/utils/sort/psort.c
index 84802f0..f49958e 100644
--- a/src/backend/utils/sort/psort.c
+++ b/src/backend/utils/sort/psort.c
@@ -16,6 +16,9 @@
  * file. You must now explicitly call an interface function to end the sort,
  * psort_end, when you are done.
  *		Now most of the global variables are stuck in the Sort nodes, and
+#include <errno.h>
+#include <errno.h>
+#include <errno.h>
  * accessed from there (they are passed to all the psort routines) so that
  * each sort running has its own separate state. This is facilitated by having
  * the Sort nodes passed in to all the interface functions.
diff --git a/src/bin/psql/stringutils.c b/src/bin/psql/stringutils.c
index bf6bece..e54597a 100644
--- a/src/bin/psql/stringutils.c
+++ b/src/bin/psql/stringutils.c
@@ -17,7 +17,7 @@
 #include <stdlib.h>
 
 #include "postgres.h"
-#ifndef HAVE_STRDUP
+#if 0
 #include "strdup.h"
 #endif
 
diff --git a/src/configure b/src/configure
index ff57769..14d84cb 100755
--- a/src/configure
+++ b/src/configure
@@ -1401,7 +1401,7 @@ fi
 
 if test "$CC" = "gcc"
 then
-	CC_VERSION=`${CC} --version`
+	CC_VERSION=`${CC} --version | head -1`
 else
 	CC_VERSION=""
 fi
diff --git a/src/include/access/hash.h b/src/include/access/hash.h
index 110daa9..98fa126 100644
--- a/src/include/access/hash.h
+++ b/src/include/access/hash.h
@@ -262,14 +262,14 @@ extern void hashrestrpos(IndexScanDesc scan);
 extern void hashdelete(Relation rel, ItemPointer tid);
 
 /* hashfunc.c */
-extern uint32 hashint2(int16 key);
-extern uint32 hashint4(uint32 key);
+extern uint32 hashint2(Datum key);
+extern uint32 hashint4(Datum key);
 extern uint32 hashint8(int64 *key);
 extern uint32 hashfloat4(float32 keyp);
 extern uint32 hashfloat8(float64 keyp);
 extern uint32 hashoid(Oid key);
 extern uint32 hashoid8(Oid *key);
-extern uint32 hashchar(char key);
+extern uint32 hashchar(Datum key);
 extern uint32 hashtext(struct varlena * key);
 extern uint32 hashname(NameData *n);
 
diff --git a/src/include/c.h b/src/include/c.h
index 6eacebd..a0f762f 100644
--- a/src/include/c.h
+++ b/src/include/c.h
@@ -47,6 +47,7 @@
    have its own.  The same goes for stddef and stdarg if present.
 */
 
+#include <errno.h>
 #include "config.h"
 
 
@@ -58,9 +59,7 @@
 #include <stdarg.h>
 #endif
 
-#ifdef __CYGWIN32__
 #include <errno.h>
-#endif
 
 /* ----------------------------------------------------------------
  *				Section 1:	bool, true, false, TRUE, FALSE, NULL
diff --git a/src/include/nodes/pg_list.h b/src/include/nodes/pg_list.h
index de481f4..4e7e868 100644
--- a/src/include/nodes/pg_list.h
+++ b/src/include/nodes/pg_list.h
@@ -77,6 +77,18 @@ typedef struct List
 #define foreach(_elt_,_list_)	\
 	for(_elt_=_list_; _elt_!=NIL;_elt_=lnext(_elt_))
 
+/*
+ * Convenience macros for building fixed-length lists
+ */
+#define makeList1(x1)				lcons(x1, NIL)
+#define makeList2(x1,x2)			lcons(x1, makeList1(x2))
+#define makeList3(x1,x2,x3)			lcons(x1, makeList2(x2,x3))
+#define makeList4(x1,x2,x3,x4)		lcons(x1, makeList3(x2,x3,x4))
+
+#define makeListi1(x1)				lconsi(x1, NIL)
+#define makeListi2(x1,x2)			lconsi(x1, makeListi1(x2))
+#define makeListi3(x1,x2,x3)		lconsi(x1, makeListi2(x2,x3))
+#define makeListi4(x1,x2,x3,x4)		lconsi(x1, makeListi3(x2,x3,x4))
 
 /*
  * function prototypes in nodes/list.c
@@ -88,7 +100,6 @@ extern bool member(void *foo, List *bar);
 extern Value *makeInteger(long i);
 extern Value *makeFloat(double d);
 extern Value *makeString(char *str);
-extern List *makeList(void *elem,...);
 extern List *lappend(List *list, void *obj);
 extern List *lremove(void *elem, List *list);
 extern void freeList(List *list);
diff --git a/src/include/postgres.h b/src/include/postgres.h
index 051d65c..b87aa0d 100644
--- a/src/include/postgres.h
+++ b/src/include/postgres.h
@@ -137,9 +137,9 @@ typedef uint32 CommandId;
 #define CATALOG(x) \
 	typedef struct CppConcat(FormData_,x)
 
-#define DATA(x) extern int errno
-#define DESCR(x) extern int errno
-#define DECLARE_INDEX(x) extern int errno
+#define DATA(x) extern int no_such_variable
+#define DESCR(x) extern int no_such_variable
+#define DECLARE_INDEX(x) extern int no_such_variable
 
 #define BUILD_INDICES
 #define BOOTSTRAP
diff --git a/src/include/storage/s_lock.h b/src/include/storage/s_lock.h
index 5a5cdc5..a6f7047 100644
--- a/src/include/storage/s_lock.h
+++ b/src/include/storage/s_lock.h
@@ -108,7 +108,7 @@ __asm__("    ldq   $0, %0              \n\
 
 
 
-#if defined(__i386__)
+#if defined(__i386__)||	defined(__x86_64__)
 #define TAS(lock) tas(lock)
 
 static __inline__ int
diff --git a/src/include/utils/builtins.h b/src/include/utils/builtins.h
index 731c965..05ddaa6 100644
--- a/src/include/utils/builtins.h
+++ b/src/include/utils/builtins.h
@@ -46,93 +46,93 @@ extern bool isfalse(bool arg1);
 
 /* char.c */
 extern int32 charin(char *ch);
-extern char *charout(int32 ch);
+extern char *charout(Datum ch);
 extern int32 cidin(char *s);
-extern char *cidout(int32 c);
-extern bool chareq(int8 arg1, int8 arg2);
-extern bool charne(int8 arg1, int8 arg2);
-extern bool charlt(int8 arg1, int8 arg2);
-extern bool charle(int8 arg1, int8 arg2);
-extern bool chargt(int8 arg1, int8 arg2);
-extern bool charge(int8 arg1, int8 arg2);
-extern int8 charpl(int8 arg1, int8 arg2);
-extern int8 charmi(int8 arg1, int8 arg2);
-extern int8 charmul(int8 arg1, int8 arg2);
-extern int8 chardiv(int8 arg1, int8 arg2);
-extern bool cideq(int8 arg1, int8 arg2);
+extern char *cidout(Datum c);
+extern bool chareq(Datum arg1, Datum arg2);
+extern bool charne(Datum arg1, Datum arg2);
+extern bool charlt(Datum arg1, Datum arg2);
+extern bool charle(Datum arg1, Datum arg2);
+extern bool chargt(Datum arg1, Datum arg2);
+extern bool charge(Datum arg1, Datum arg2);
+extern int8 charpl(Datum arg1, Datum arg2);
+extern int8 charmi(Datum arg1, Datum arg2);
+extern int8 charmul(Datum arg1, Datum arg2);
+extern int8 chardiv(Datum arg1, Datum arg2);
+extern bool cideq(Datum arg1, Datum arg2);
 extern int8 text_char(text *arg1);
-extern text *char_text(int8 arg1);
+extern text *char_text(Datum arg1);
 
 /* int.c */
 extern int32 int2in(char *num);
-extern char *int2out(int16 sh);
+extern char *int2out(Datum sh);
 extern int16 *int28in(char *shs);
 extern char *int28out(int16 *shs);
 extern int32 *int44in(char *input_string);
 extern char *int44out(int32 *an_array);
 extern int32 int4in(char *num);
-extern char *int4out(int32 l);
-extern int32 i2toi4(int16 arg1);
-extern int16 i4toi2(int32 arg1);
-extern text *int2_text(int16 arg1);
+extern char *int4out(Datum l);
+extern int32 i2toi4(Datum arg1);
+extern int16 i4toi2(Datum arg1);
+extern text *int2_text(Datum arg1);
 extern int16 text_int2(text *arg1);
-extern text *int4_text(int32 arg1);
+extern text *int4_text(Datum arg1);
 extern int32 text_int4(text *arg1);
-extern bool int4eq(int32 arg1, int32 arg2);
-extern bool int4ne(int32 arg1, int32 arg2);
-extern bool int4lt(int32 arg1, int32 arg2);
-extern bool int4le(int32 arg1, int32 arg2);
-extern bool int4gt(int32 arg1, int32 arg2);
-extern bool int4ge(int32 arg1, int32 arg2);
-extern bool int2eq(int16 arg1, int16 arg2);
-extern bool int2ne(int16 arg1, int16 arg2);
-extern bool int2lt(int16 arg1, int16 arg2);
-extern bool int2le(int16 arg1, int16 arg2);
-extern bool int2gt(int16 arg1, int16 arg2);
-extern bool int2ge(int16 arg1, int16 arg2);
-extern bool int24eq(int32 arg1, int32 arg2);
-extern bool int24ne(int32 arg1, int32 arg2);
-extern bool int24lt(int32 arg1, int32 arg2);
-extern bool int24le(int32 arg1, int32 arg2);
-extern bool int24gt(int32 arg1, int32 arg2);
-extern bool int24ge(int32 arg1, int32 arg2);
-extern bool int42eq(int32 arg1, int32 arg2);
-extern bool int42ne(int32 arg1, int32 arg2);
-extern bool int42lt(int32 arg1, int32 arg2);
-extern bool int42le(int32 arg1, int32 arg2);
-extern bool int42gt(int32 arg1, int32 arg2);
-extern bool int42ge(int32 arg1, int32 arg2);
-extern bool keyfirsteq(int16 *arg1, int16 arg2);
-extern int32 int4um(int32 arg);
-extern int32 int4pl(int32 arg1, int32 arg2);
-extern int32 int4mi(int32 arg1, int32 arg2);
-extern int32 int4mul(int32 arg1, int32 arg2);
-extern int32 int4div(int32 arg1, int32 arg2);
-extern int32 int4inc(int32 arg);
-extern int16 int2um(int16 arg);
-extern int16 int2pl(int16 arg1, int16 arg2);
-extern int16 int2mi(int16 arg1, int16 arg2);
-extern int16 int2mul(int16 arg1, int16 arg2);
-extern int16 int2div(int16 arg1, int16 arg2);
-extern int16 int2inc(int16 arg);
-extern int32 int24pl(int32 arg1, int32 arg2);
-extern int32 int24mi(int32 arg1, int32 arg2);
-extern int32 int24mul(int32 arg1, int32 arg2);
-extern int32 int24div(int32 arg1, int32 arg2);
-extern int32 int42pl(int32 arg1, int32 arg2);
-extern int32 int42mi(int32 arg1, int32 arg2);
-extern int32 int42mul(int32 arg1, int32 arg2);
-extern int32 int42div(int32 arg1, int32 arg2);
-extern int32 int4mod(int32 arg1, int32 arg2);
-extern int32 int2mod(int16 arg1, int16 arg2);
-extern int32 int24mod(int32 arg1, int32 arg2);
-extern int32 int42mod(int32 arg1, int32 arg2);
-extern int32 int4fac(int32 arg1);
-extern int32 int2fac(int16 arg1);
-extern int16 int2larger(int16 arg1, int16 arg2);
-extern int16 int2smaller(int16 arg1, int16 arg2);
-extern int32 int4larger(int32 arg1, int32 arg2);
-extern int32 int4smaller(int32 arg1, int32 arg2);
+extern bool int4eq(Datum arg1, Datum arg2);
+extern bool int4ne(Datum arg1, Datum arg2);
+extern bool int4lt(Datum arg1, Datum arg2);
+extern bool int4le(Datum arg1, Datum arg2);
+extern bool int4gt(Datum arg1, Datum arg2);
+extern bool int4ge(Datum arg1, Datum arg2);
+extern bool int2eq(Datum arg1, Datum arg2);
+extern bool int2ne(Datum arg1, Datum arg2);
+extern bool int2lt(Datum arg1, Datum arg2);
+extern bool int2le(Datum arg1, Datum arg2);
+extern bool int2gt(Datum arg1, Datum arg2);
+extern bool int2ge(Datum arg1, Datum arg2);
+extern bool int24eq(Datum arg1, Datum arg2);
+extern bool int24ne(Datum arg1, Datum arg2);
+extern bool int24lt(Datum arg1, Datum arg2);
+extern bool int24le(Datum arg1, Datum arg2);
+extern bool int24gt(Datum arg1, Datum arg2);
+extern bool int24ge(Datum arg1, Datum arg2);
+extern bool int42eq(Datum arg1, Datum arg2);
+extern bool int42ne(Datum arg1, Datum arg2);
+extern bool int42lt(Datum arg1, Datum arg2);
+extern bool int42le(Datum arg1, Datum arg2);
+extern bool int42gt(Datum arg1, Datum arg2);
+extern bool int42ge(Datum arg1, Datum arg2);
+extern bool keyfirsteq(int16 *arg1, Datum arg2);
+extern int32 int4um(Datum arg);
+extern int32 int4pl(Datum arg1, Datum arg2);
+extern int32 int4mi(Datum arg1, Datum arg2);
+extern int32 int4mul(Datum arg1, Datum arg2);
+extern int32 int4div(Datum arg1, Datum arg2);
+extern int32 int4inc(Datum arg);
+extern int16 int2um(Datum arg);
+extern int16 int2pl(Datum arg1, Datum arg2);
+extern int16 int2mi(Datum arg1, Datum arg2);
+extern int16 int2mul(Datum arg1, Datum arg2);
+extern int16 int2div(Datum arg1, Datum arg2);
+extern int16 int2inc(Datum arg);
+extern int32 int24pl(Datum arg1, Datum arg2);
+extern int32 int24mi(Datum arg1, Datum arg2);
+extern int32 int24mul(Datum arg1, Datum arg2);
+extern int32 int24div(Datum arg1, Datum arg2);
+extern int32 int42pl(Datum arg1, Datum arg2);
+extern int32 int42mi(Datum arg1, Datum arg2);
+extern int32 int42mul(Datum arg1, Datum arg2);
+extern int32 int42div(Datum arg1, Datum arg2);
+extern int32 int4mod(Datum arg1, Datum arg2);
+extern int32 int2mod(Datum arg1, Datum arg2);
+extern int32 int24mod(Datum arg1, Datum arg2);
+extern int32 int42mod(Datum arg1, Datum arg2);
+extern int32 int4fac(Datum arg1);
+extern int32 int2fac(Datum arg1);
+extern int16 int2larger(Datum arg1, Datum arg2);
+extern int16 int2smaller(Datum arg1, Datum arg2);
+extern int32 int4larger(Datum arg1, Datum arg2);
+extern int32 int4smaller(Datum arg1, Datum arg2);
 
 /* name.c */
 extern NameData *namein(char *s);
@@ -160,17 +160,17 @@ extern void ltoa(int32 l, char *a);
  *		Per-opclass comparison functions for new btrees.  These are
  *		stored in pg_amproc and defined in nbtree/
  */
-extern int32 btint2cmp(int16 a, int16 b);
-extern int32 btint4cmp(int32 a, int32 b);
+extern int32 btint2cmp(Datum a, Datum b);
+extern int32 btint4cmp(Datum a, Datum b);
 extern int32 btint8cmp(int64 *a, int64 *b);
-extern int32 btint24cmp(int16 a, int32 b);
-extern int32 btint42cmp(int32 a, int16 b);
+extern int32 btint24cmp(Datum a, Datum b);
+extern int32 btint42cmp(Datum a, Datum b);
 extern int32 btfloat4cmp(float32 a, float32 b);
 extern int32 btfloat8cmp(float64 a, float64 b);
 extern int32 btoidcmp(Oid a, Oid b);
 extern int32 btoid8cmp(Oid *a, Oid *b);
-extern int32 btabstimecmp(AbsoluteTime a, AbsoluteTime b);
-extern int32 btcharcmp(char a, char b);
+extern int32 btabstimecmp(Datum a, Datum b);
+extern int32 btcharcmp(Datum a, Datum b);
 extern int32 btnamecmp(NameData *a, NameData *b);
 extern int32 bttextcmp(struct varlena * a, struct varlena * b);
 
@@ -195,25 +195,25 @@ extern int32 pqtest(struct varlena * vlena);
 
 /* date.c */
 extern RelativeTime reltimein(char *timestring);
-extern char *reltimeout(RelativeTime timevalue);
+extern char *reltimeout(Datum timevalue);
 extern TimeInterval tintervalin(char *intervalstr);
 extern char *tintervalout(TimeInterval interval);
 extern RelativeTime timespan_reltime(TimeSpan *timespan);
-extern TimeSpan *reltime_timespan(RelativeTime reltime);
-extern TimeInterval mktinterval(AbsoluteTime t1, AbsoluteTime t2);
-extern AbsoluteTime timepl(AbsoluteTime t1, RelativeTime t2);
-extern AbsoluteTime timemi(AbsoluteTime t1, RelativeTime t2);
+extern TimeSpan *reltime_timespan(Datum reltime);
+extern TimeInterval mktinterval(Datum t1, Datum t2);
+extern AbsoluteTime timepl(Datum t1, Datum t2);
+extern AbsoluteTime timemi(Datum t1, Datum t2);
 
-/* extern RelativeTime abstimemi(AbsoluteTime t1, AbsoluteTime t2);  static*/
-extern int	ininterval(AbsoluteTime t, TimeInterval interval);
+/* extern RelativeTime abstimemi(Datum t1, Datum t2);  static*/
+extern int	ininterval(Datum t, TimeInterval interval);
 extern RelativeTime intervalrel(TimeInterval interval);
 extern AbsoluteTime timenow(void);
-extern bool reltimeeq(RelativeTime t1, RelativeTime t2);
-extern bool reltimene(RelativeTime t1, RelativeTime t2);
-extern bool reltimelt(RelativeTime t1, RelativeTime t2);
-extern bool reltimegt(RelativeTime t1, RelativeTime t2);
-extern bool reltimele(RelativeTime t1, RelativeTime t2);
-extern bool reltimege(RelativeTime t1, RelativeTime t2);
+extern bool reltimeeq(Datum t1, Datum t2);
+extern bool reltimene(Datum t1, Datum t2);
+extern bool reltimelt(Datum t1, Datum t2);
+extern bool reltimegt(Datum t1, Datum t2);
+extern bool reltimele(Datum t1, Datum t2);
+extern bool reltimege(Datum t1, Datum t2);
 extern bool intervalsame(TimeInterval i1, TimeInterval i2);
 extern bool intervaleq(TimeInterval i1, TimeInterval i2);
 extern bool intervalne(TimeInterval i1, TimeInterval i2);
@@ -221,12 +221,12 @@ extern bool intervallt(TimeInterval i1, TimeInterval i2);
 extern bool intervalgt(TimeInterval i1, TimeInterval i2);
 extern bool intervalle(TimeInterval i1, TimeInterval i2);
 extern bool intervalge(TimeInterval i1, TimeInterval i2);
-extern bool intervalleneq(TimeInterval i, RelativeTime t);
-extern bool intervallenne(TimeInterval i, RelativeTime t);
-extern bool intervallenlt(TimeInterval i, RelativeTime t);
-extern bool intervallengt(TimeInterval i, RelativeTime t);
-extern bool intervallenle(TimeInterval i, RelativeTime t);
-extern bool intervallenge(TimeInterval i, RelativeTime t);
+extern bool intervalleneq(TimeInterval i, Datum t);
+extern bool intervallenne(TimeInterval i, Datum t);
+extern bool intervallenlt(TimeInterval i, Datum t);
+extern bool intervallengt(TimeInterval i, Datum t);
+extern bool intervallenle(TimeInterval i, Datum t);
+extern bool intervallenge(TimeInterval i, Datum t);
 extern bool intervalct(TimeInterval i1, TimeInterval i2);
 extern bool intervalov(TimeInterval i1, TimeInterval i2);
 extern AbsoluteTime intervalstart(TimeInterval i);
@@ -274,13 +274,13 @@ extern bool float8le(float64 arg1, float64 arg2);
 extern bool float8gt(float64 arg1, float64 arg2);
 extern bool float8ge(float64 arg1, float64 arg2);
 extern float64 ftod(float32 num);
-extern float64 i4tod(int32 num);
-extern float64 i2tod(int16 num);
+extern float64 i4tod(Datum num);
+extern float64 i2tod(Datum num);
 extern float32 dtof(float64 num);
 extern int32 dtoi4(float64 num);
 extern int16 dtoi2(float64 num);
-extern float32 i4tof(int32 num);
-extern float32 i2tof(int16 num);
+extern float32 i4tof(Datum num);
+extern float32 i2tof(Datum num);
 extern int32 ftoi4(float32 num);
 extern int16 ftoi2(float32 num);
 extern float64 text_float8(text *str);
@@ -346,8 +346,8 @@ extern bool oid8lt(Oid *arg1, Oid *arg2);
 extern bool oid8le(Oid *arg1, Oid *arg2);
 extern bool oid8ge(Oid *arg1, Oid *arg2);
 extern bool oid8gt(Oid *arg1, Oid *arg2);
-extern bool oideqint4(Oid arg1, int32 arg2);
-extern bool int4eqoid(int32 arg1, Oid arg2);
+extern bool oideqint4(Oid arg1, Datum arg2);
+extern bool int4eqoid(Datum arg1, Oid arg2);
 extern text *oid_text(Oid arg1);
 extern Oid	text_oid(text *arg1);
 
@@ -407,11 +407,11 @@ DateTime   *timestamp_datetime(time_t timestamp);
 time_t		datetime_timestamp(DateTime *datetime);
 
 /* varchar.c */
-extern char *bpcharin(char *s, int dummy, int32 atttypmod);
+extern char *bpcharin(char *s, Datum dummy, Datum atttypmod);
 extern char *bpcharout(char *s);
-extern char *bpchar(char *s, int32 slen);
-extern ArrayType *_bpchar(ArrayType *v, int32 slen);
-extern char *char_bpchar(int32 c);
+extern char *bpchar(char *s, Datum slen);
+extern ArrayType *_bpchar(ArrayType *v, Datum slen);
+extern char *char_bpchar(Datum c);
 extern int32 bpchar_char(char *s);
 extern char *name_bpchar(NameData *s);
 extern NameData *bpchar_name(char *s);
@@ -426,10 +426,10 @@ extern int32 bpcharlen(char *arg);
 extern int32 bpcharoctetlen(char *arg);
 extern uint32 hashbpchar(struct varlena * key);
 
-extern char *varcharin(char *s, int dummy, int32 atttypmod);
+extern char *varcharin(char *s, int dummy, Datum atttypmod);
 extern char *varcharout(char *s);
-extern char *varchar(char *s, int32 slen);
-extern ArrayType *_varchar(ArrayType *v, int32 slen);
+extern char *varchar(char *s, Datum slen);
+extern ArrayType *_varchar(ArrayType *v, Datum slen);
 extern bool varchareq(char *arg1, char *arg2);
 extern bool varcharne(char *arg1, char *arg2);
 extern bool varcharlt(char *arg1, char *arg2);
@@ -457,7 +457,7 @@ extern text *text_smaller(text *arg1, text *arg2);
 extern int32 textlen(text *arg);
 extern int32 textoctetlen(text *arg);
 extern int32 textpos(text *arg1, text *arg2);
-extern text *text_substr(text *string, int32 m, int32 n);
+extern text *text_substr(text *string, Datum m, Datum n);
 extern text *name_text(NameData *s);
 extern NameData *text_name(text *s);
 
@@ -563,7 +563,7 @@ int4		macaddr_cmp(macaddr *a1, macaddr *a2);
 text	   *macaddr_manuf(macaddr *addr);
 
 /* numeric.c */
-Numeric		numeric_in(char *str, int dummy, int32 typmod);
+Numeric		numeric_in(char *str, int dummy, Datum typmod);
 char	   *numeric_out(Numeric num);
 Numeric		numeric(Numeric num, int32 typmod);
 Numeric		numeric_abs(Numeric num);
@@ -592,7 +592,7 @@ Numeric		numeric_exp(Numeric num);
 Numeric		numeric_ln(Numeric num);
 Numeric		numeric_log(Numeric num1, Numeric num2);
 Numeric		numeric_power(Numeric num1, Numeric num2);
-Numeric		int4_numeric(int32 val);
+Numeric		int4_numeric(Datum val);
 int32		numeric_int4(Numeric num);
 Numeric		float4_numeric(float32 val);
 float32		numeric_float4(Numeric num);
diff --git a/src/include/utils/nabstime.h b/src/include/utils/nabstime.h
index ace0e13..9683aa2 100644
--- a/src/include/utils/nabstime.h
+++ b/src/include/utils/nabstime.h
@@ -28,8 +28,8 @@
  * is 64-bits.	Therefore, typedef these both as simply 'time_t', and let
  * the OS define what the size really is. -- RME 3/5/99
  */
-typedef time_t AbsoluteTime;
-typedef time_t RelativeTime;
+typedef int32 AbsoluteTime;
+typedef int32 RelativeTime;
 
 typedef struct
 {
@@ -107,21 +107,21 @@ extern AbsoluteTime GetCurrentAbsoluteTime(void);
  * nabstime.c prototypes
  */
 extern AbsoluteTime nabstimein(char *timestr);
-extern char *nabstimeout(AbsoluteTime time);
+extern char *nabstimeout(Datum time);
 
-extern bool abstimeeq(AbsoluteTime t1, AbsoluteTime t2);
-extern bool abstimene(AbsoluteTime t1, AbsoluteTime t2);
-extern bool abstimelt(AbsoluteTime t1, AbsoluteTime t2);
-extern bool abstimegt(AbsoluteTime t1, AbsoluteTime t2);
-extern bool abstimele(AbsoluteTime t1, AbsoluteTime t2);
-extern bool abstimege(AbsoluteTime t1, AbsoluteTime t2);
-extern bool abstime_finite(AbsoluteTime time);
+extern bool abstimeeq(Datum t1, Datum t2);
+extern bool abstimene(Datum t1, Datum t2);
+extern bool abstimelt(Datum t1, Datum t2);
+extern bool abstimegt(Datum t1, Datum t2);
+extern bool abstimele(Datum t1, Datum t2);
+extern bool abstimege(Datum t1, Datum t2);
+extern bool abstime_finite(Datum time);
 
 extern AbsoluteTime datetime_abstime(DateTime *datetime);
-extern DateTime *abstime_datetime(AbsoluteTime abstime);
+extern DateTime *abstime_datetime(Datum abstime);
 
-extern bool AbsoluteTimeIsBefore(AbsoluteTime time1, AbsoluteTime time2);
+extern bool AbsoluteTimeIsBefore(Datum time1, Datum time2);
 
-extern void abstime2tm(AbsoluteTime time, int *tzp, struct tm * tm, char *tzn);
+extern void abstime2tm(Datum time, int *tzp, struct tm * tm, char *tzn);
 
 #endif	 /* NABSTIME_H */
diff --git a/src/interfaces/ecpg/preproc/Makefile b/src/interfaces/ecpg/preproc/Makefile
index 26e1cf3..ff7449f 100644
--- a/src/interfaces/ecpg/preproc/Makefile
+++ b/src/interfaces/ecpg/preproc/Makefile
@@ -17,8 +17,8 @@ all:: ecpg
 
 preproc.c preproc.h: preproc.y
 	$(YACC) $(YFLAGS) $<
-	mv y.tab.c preproc.c
-	mv y.tab.h preproc.h
+	mv preproc.tab.c preproc.c
+	mv preproc.tab.h preproc.h
 
 clean:
 	rm -f *.o core a.out ecpg$(X) *~ *.output
diff --git a/src/interfaces/ecpg/preproc/extern.h b/src/interfaces/ecpg/preproc/extern.h
index 52a3896..deb5421 100644
--- a/src/interfaces/ecpg/preproc/extern.h
+++ b/src/interfaces/ecpg/preproc/extern.h
@@ -9,8 +9,8 @@ extern int	braces_open,
 			struct_level;
 extern char *yytext,
 			errortext[128];
-extern int	yylineno,
-			yyleng;
+extern int yylineno;
+extern size_t yyleng;
 extern FILE *yyin,
 		   *yyout;
 
diff --git a/src/interfaces/ecpg/preproc/preproc.y b/src/interfaces/ecpg/preproc/preproc.y
index 274d4b6..adf91ad 100644
--- a/src/interfaces/ecpg/preproc/preproc.y
+++ b/src/interfaces/ecpg/preproc/preproc.y
@@ -823,8 +823,8 @@ adjust_array(enum ECPGttype type_enum, int *dimension, int *length, int type_dim
 %type  <str>	opt_cursor opt_lmode
 %type  <str>	case_expr when_clause_list case_default case_arg when_clause
 %type  <str>    select_clause opt_select_limit select_limit_value
-%type  <str>    select_offset_value table_list using_expr join_expr
-%type  <str>	using_list from_expr table_expr join_clause join_type
+%type  <str>    select_offset_value using_expr join_expr
+%type  <str>	using_list from_expr table_expr join_type
 %type  <str>	join_qual update_list join_clause join_clause_with_union
 %type  <str>	opt_level opt_lock lock_type
 
@@ -841,7 +841,7 @@ adjust_array(enum ECPGttype type_enum, int *dimension, int *length, int type_dim
 %type  <str>	enum_type civariableonly ECPGCursorStmt ECPGDeallocate
 %type  <str>	ECPGFree ECPGDeclare ECPGVar sql_variable_declarations
 %type  <str>	sql_declaration sql_variable_list sql_variable opt_at
-%type  <str>    struct_type s_struct declaration variable_declarations
+%type  <str>    struct_type declaration variable_declarations
 %type  <str>    s_struct s_union union_type ECPGSetAutocommit on_off
 
 %type  <type_enum> simple_type varchar_type
diff --git a/src/pl/plpgsql/src/gram.y b/src/pl/plpgsql/src/gram.y
index 7291afd..1c296bb 100644
--- a/src/pl/plpgsql/src/gram.y
+++ b/src/pl/plpgsql/src/gram.y
@@ -40,9 +40,11 @@
 #include "string.h"
 #include "plpgsql.h"
 
-#ifdef YYBISON
+#if 0
 #include "pl_scan.c" /* GNU bison wants it here */
 #endif
+extern char yytext[];
+extern int yylineno;
 
 static	PLpgSQL_expr	*read_sqlstmt(int until, char *s, char *sqlstart);
 static	PLpgSQL_stmt	*make_select_stmt(void);
@@ -1082,7 +1084,7 @@ lno		:
 
 %%
 
-#ifndef YYBISON
+#if 1
 #include "pl_scan.c" /* BSD yacc wants it here */
 #endif
 
diff --git a/src/template/linux_alpha b/src/template/linux_alpha
index 65415dd..b66b067 100644
--- a/src/template/linux_alpha
+++ b/src/template/linux_alpha
@@ -8,3 +8,4 @@ USE_LOCALE:no
 DLSUFFIX:.so
 YFLAGS:-d
 YACC:bison -y
+CPU:alpha
