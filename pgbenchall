#!/bin/sh

set -e

here="$(dirname "${BASH_SOURCE[0]}")"
start="$(date +%s)"

shared_buffers=1048576
global_pgoptions="-c shared_buffers=$shared_buffers"

locale=uk_UA.UTF-8
encoding=unicode
wordlist=/usr/share/dict/ukrainian
scale=300
duration=900

pgbench=/usr/local/pgsql/bin/pgbench

export LC_ALL=$locale
export LC_COLLATE=$LC_ALL
export LC_CTYPE=$LC_ALL
export LC_NUMERIC=C # c.f. REL7_3~975
export LC_TIME=C
export LC_MESSAGES=C

RELS="$(for v in /usr/local/oldpgsql/*/bin/initdb ; do echo "$v"  | sed 's,.*/[0-9]*-[0-9]*-[0-9]*-\([^/]*\)/bin/initdb,\1,' ; done | sort -R)"

NRELS="$(for v in $RELS; do echo "$v" ; done | wc -l)"
N=0

if [[ -e /tmp/.s.PGSQL.5432 ]] ; then
	echo /tmp/.s.PGSQL.5432 already exists
	exit 1
fi

for ver in $RELS ; do
    d="$(echo /usr/local/oldpgsql/*-$ver)"
    rel="$(basename $d)"

	now="$(date +%s)"
	if [[ $N > 0 ]]; then
		average=$(( ( $now - $start ) / $N ))
		remaining=$(( ( $NRELS - $N ) * $average ))
		eta=$(( $now + $remaining ))
		remaining_str="$( TZ=GMT LC_ALL=C date +%Hh%MM -d @$remaining )"
		eta_str="$( LC_ALL=C date -d @$eta )"
	fi


    N=$(( N + 1 ))

    if [[ ! -f $d/bin/initdb ]] ; then
		echo
		echo "========================================================================"
		echo "Skipping $rel ($N/$NRELS)"
		echo "========================================================================"
		continue
    fi

    TESTDIR="/var/tmp/oldpgsql"
    if [[ ! -d $TESTDIR ]] ; then
		mkdir $TESTDIR
    fi

    bin="$d/bin"
    lib="$d/lib"
    binfallback="$(echo "$d/../*-REL7_3_21/bin")"
    db="$TESTDIR/d-$rel"
    log="$TESTDIR/l-$rel.log"
    out="$TESTDIR/o-$rel.out"

    echo
    echo "========================================================================"
    echo "Testing $rel ($N/$NRELS)"
	echo "Current Time:	$(LC_ALL=C date)"
	echo "Logs in:  	$log"
	echo "Output in: 	$out"
	echo "Remaining: 	$remaining_str (average=$average remaining=$remaining)"
  	echo "ETA:   	  	$eta_str"
    echo "========================================================================"

    if [ ! -d $db ] ; then
		echo "Running initdb for $rel in $db"
		initdbargs=""
		if PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/initdb --help | grep -e --encoding >/dev/null ; then
			initdbargs="$initdbargs --encoding $encoding"
		fi
		if PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/initdb --help | grep -e --locale >/dev/null ; then
			initdbargs="$initdbargs --locale $LC_ALL"
		fi
		if PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/initdb --help | grep -e --lc-numeric >/dev/null ; then
			initdbargs="$initdbargs --lc-numeric C"
		fi
		if PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/initdb --help | grep -e --lc-time >/dev/null ; then
			initdbargs="$initdbargs --lc-time C"
		fi
		if PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/initdb --help | grep -e --lc-messages >/dev/null ; then
			initdbargs="$initdbargs --lc-messages C"
		fi
		PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/initdb -D $db $initdbargs || continue
    fi

    if [[ -e /tmp/.s.PGSQL.5432 ]] ; then
		echo /tmp/.s.PGSQL.5432 already exists
		exit 1
    fi

	if grep checkpoint_segments $db/postgresql.conf >/dev/null; then
		pgoptions="$global_pgoptions -c checkpoint_segments=32"
	else
		pgoptions="$global_pgoptions"
	fi

    trap "$bin/pg_ctl -D $db stop" EXIT
    $bin/pg_ctl -D $db -l $log -o "$pgoptions" start || PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/postmaster -D $db $pgoptions > $log 2>&1 &
    echo -n "Waiting for $rel to start up..."
    for i in `seq 1 300` ; do
		sleep 1
    	PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -o /dev/null -X template1 -c 'select 1' 2>/dev/null && break
		echo -n .
    done
    if PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -o /dev/null -X template1 -c 'select 1' ; then
		echo done
    else
		trap - EXIT
		$bin/pg_ctl -D $db stop -m fast || echo pg_ctl exited with status $?
		continue
    fi

    if ! PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -o /dev/null -X -c 'select 1'; then
		createdbargs=""
		if PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/createdb --help | grep -e '--encoding' >/dev/null; then
			createdbargs="$createdbargs --encoding unicode"
		fi
		if PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/createdb --help | grep -e '--locale' >/dev/null; then
			createdbargs="$createdbargs --locale $locale"
		fi
		if PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/createdb --help | grep -e '--lc_collate' >/dev/null; then
			createdbargs="$createdbargs --lc_collate $locale"
		fi
		if PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/createdb --help | grep -e '--lc_ctype' >/dev/null; then
			createdbargs="$createdbargs --lc_ctype $locale"
		fi
		echo "Creating and initializing db for $rel"
		PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/createdb $createdbargs

    fi

    branches=$(PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c 'select count(*) from pgbench_branches' 2>/dev/null || echo 0)
    tellers=$(PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c 'select count(*) from pgbench_tellers' 2>/dev/null || echo 0)
    accounts=$(PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c 'select count(*) from pgbench_accounts' 2>/dev/null || echo 0)
	npkey=$(PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c "select count(*) from pg_class where relname like 'pgbench%pkey'" 2>/dev/null || echo 0)
	nrels=$(PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c "select count(*) from pg_class where relname like 'pgbench%'" 2>/dev/null || echo 0)

	if [[ $branches -ne $scale || $accounts -ne $(( $scale * 100000 )) || $tellers -ne $(( $scale * 10 )) || $npkey -ne 3 || $nrels -ne 7 ]] ; then
		echo -n "Initializing pgbench scale factor $scale on $rel..."
		echo "========================================================================" >> $out
		echo "Initializing $rel (scale $scale)"                                         >> $out
		echo "Start Time: $(LC_ALL=C TZ=GMT date --rfc-3339=seconds)"                   >> $out
		TIMEFORMAT=%0lR
		time ( ( $pgbench -i -s $scale ) >>$out 2>&1 || echo pgbench exited with status $?)
		unset TIMEFORMAT
		echo "End Time: $(LC_ALL=C TZ=GMT date --rfc-3339=seconds)"                     >> $out
		echo "========================================================================" >> $out
	fi

    branches=$(PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c 'select count(*) from pgbench_branches' 2>/dev/null || echo 0)
    tellers=$(PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c 'select count(*) from pgbench_tellers' 2>/dev/null || echo 0)
    accounts=$(PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c 'select count(*) from pgbench_accounts' 2>/dev/null || echo 0)
	npkey=$(PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c "select count(*) from pg_class where relname like 'pgbench%pkey'" 2>/dev/null || echo 0)
	nrels=$(PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c "select count(*) from pg_class where relname like 'pgbench%'" 2>/dev/null || echo 0)

	if [[ $branches -ne $scale || $accounts -ne $(( $scale * 100000 )) || $tellers -ne $(( $scale * 10 )) || $npkey -ne 3 || $nrels -ne 7 ]] ; then
		echo "Found discrepancy in initialized database"
		echo "branches=$branches accounts=$accounts tellers=$tellers npkey=$npkey nrels=$nrels"
		echo "Skipping $rel due to failure to initialize pgbench"
	else


		PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c "select setting from pg_settings where name = 'shared_buffers'" 2>/dev/null
		PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c 'checkpoint' 2>/dev/null
		sync
		sleep 5

		sync
		sleep 5

		echo -n "Running Benchmark on $rel..."

		echo "========================================================================" >> $out
		echo "Testing $rel"                                                             >> $out
		echo "Start Time: $(LC_ALL=C TZ=GMT date --rfc-3339=seconds)"                   >> $out

		# start iostat to run for $duration seconds and then print a single output
		iostat -x -y $(( $duration + 30 )) 1 >> $out &
		iostatpid=$!
		TIMEFORMAT=%0lR
		time ( ( $pgbench -T $duration -r -c 32 -j 4 )  >>$out 2>&1 || echo pgbench exited with status $?)
		unset TIMEFORMAT
		wait $iostatpid || echo iostat exited with status $?

		echo "End Time: $(LC_ALL=C TZ=GMT date --rfc-3339=seconds)"                     >> $out
		echo "========================================================================" >> $out

	fi

	echo -n "Shutting down server..."
	# try to settle i/o down to avoid pg_ctl stop taking too long
	PATH=$bin:$PATH LD_LIBRARY_PATH=$lib $bin/psql -t -X -c 'checkpoint' 2>/dev/null
	sync
	sleep 5
	
	trap - EXIT
	export PGCTLTIMEOUT=300
	while [[ -e /tmp/.s.PGSQL.5432 ]] ; do
		$bin/pg_ctl -D $db stop -m fast || echo pg_ctl exited with status $? retrying
	done
done

echo
echo "========================================================================"
echo " All done "
echo "========================================================================"
